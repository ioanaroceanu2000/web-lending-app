[{"/Users/ioanaroceanu/Documents/web-lending-app/src/index.js":"1","/Users/ioanaroceanu/Documents/web-lending-app/src/App.js":"2","/Users/ioanaroceanu/Documents/web-lending-app/src/reportWebVitals.js":"3","/Users/ioanaroceanu/Documents/web-lending-app/src/price_update.js":"4","/Users/ioanaroceanu/Documents/web-lending-app/src/abis/abi.js":"5","/Users/ioanaroceanu/Documents/web-lending-app/src/Balance.js":"6","/Users/ioanaroceanu/Documents/web-lending-app/src/ActionButtons.js":"7","/Users/ioanaroceanu/Documents/web-lending-app/src/DepositView.js":"8","/Users/ioanaroceanu/Documents/web-lending-app/src/utils.js":"9","/Users/ioanaroceanu/Documents/web-lending-app/src/priceUpdate.js":"10"},{"size":541,"mtime":1611497412043,"results":"11","hashOfConfig":"12"},{"size":6815,"mtime":1612017813390,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1610542469841,"results":"14","hashOfConfig":"12"},{"size":9102,"mtime":1612015370662,"results":"15","hashOfConfig":"12"},{"size":35030,"mtime":1611303987504,"results":"16","hashOfConfig":"12"},{"size":2710,"mtime":1611999086566,"results":"17","hashOfConfig":"12"},{"size":1919,"mtime":1611846905830,"results":"18","hashOfConfig":"12"},{"size":4937,"mtime":1611914476529,"results":"19","hashOfConfig":"12"},{"size":5195,"mtime":1612023421777,"results":"20","hashOfConfig":"12"},{"size":767,"mtime":1612015298684,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"9le6z9",{"filePath":"25","messages":"26","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"/Users/ioanaroceanu/Documents/web-lending-app/src/index.js",[],["49","50"],"/Users/ioanaroceanu/Documents/web-lending-app/src/App.js",["51","52","53","54","55","56","57","58","59","60","61"],"import React, {Component} from 'react';\nimport './App.css';\nimport PriceUpdate from './price_update';\nimport Balance from './Balance.js'\nimport Web3 from 'web3';\nimport {Container, Row, Col, Navbar, Button, Form} from 'react-bootstrap';\nimport logo from './logoTr.png';\nimport warwicklogo from './warwicklogo.png';\nimport ActionButtons from './ActionButtons.js';\nimport {getTokenAPIPrices, getTokenAPIData, deployToken, getTokenAPIPrice, getAccount, createToken, addLoadedTokens} from './utils.js';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      toBeAdded: 'WETH',\n      web3: null,\n      userAddress: null,\n      userDeposit: 0,\n      depositedToken: '',\n      userCollateral: 0,\n      collateralToken: '',\n      userOwed: 0,\n      owedToken:'',\n      liquidityPool: null,\n      exchange: null,\n      addedTokenIDs: [], //reaIDs\n      realToFakeID: [], // {realID: fakeID}\n      allTokenIDs: [], // realIDs\n      allTokenData: {}, // {realID: {symbol: -, utilisationRate: -, collateral: -, baseRate: -, slope1:-, slope2:-, sread: -}\n    };\n  }\n\n  componentWillMount(){\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData(){\n    // load web3\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const network = await web3.eth.net.getNetworkType();\n    console.log(\"network:\",network);\n\n    // load contracts\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD);\n    const exinstance = new web3.eth.Contract(Exchange_ABI, Exchange_ADD);\n    this.setState({liquidityPool: lpinstance, exchange: exinstance});\n\n    //get all token's data from api\n    const [ids, data]= await getTokenAPIData();\n    this.setState({allTokenData: data, allTokenIDs: ids, web3: web3});\n    await addLoadedTokens('cevaa', 'altcevaa');\n  }\n\n  async addToken(){\n    if(this.state.addedTokenIDs.includes(this.state.toBeAdded)){\n      alert(\"This token already has a pool.\")\n    }else{\n      // get selected token's details to pass to the create function\n      let tokenDetails = {};\n      const tokenData = this.state.allTokenData[this.state.toBeAdded];\n      tokenDetails.symbol = tokenData.symbol;\n      tokenDetails.utilisation = Math.round(tokenData.utilisationRate);\n      tokenDetails.collateral = Math.round(tokenData.collateral);\n      tokenDetails.baseRate = tokenData.baseRate;\n      tokenDetails.slope1 = tokenData.slope1;\n      tokenDetails.slope2 = tokenData.slope2;\n      tokenDetails.spread = tokenData.spread;\n      console.log(tokenData.spread);\n      let price = await getTokenAPIPrice(this.state.toBeAdded);\n      tokenDetails.price = Math.round(price*1000);\n      console.log(tokenDetails);\n      // get current connected account\n      const user = await getAccount(this.state.web3);\n      // deploy and add token to contracts\n      const fakeTokenID = await createToken(user, this.state.web3, tokenDetails, this.state.exchange, this.state.liquidityPool);\n      // register new added token\n      const newEntry = {...this.state.realToFakeID};\n      newEntry[this.state.toBeAdded] = fakeTokenID;\n      this.setState({addedTokenIDs: [...this.state.addedTokenIDs, this.state.toBeAdded], realToFakeID: newEntry});\n    }\n  }\n\n  handleChangeAddToken = (e) => {\n    this.setState({ toBeAdded: e.target.value });\n  }\n\n  //// RENDER COMPONENTS\n  displayAddTokenOption(){\n    var tokenOptions = [];\n    var i =0;\n    const len = this.state.allTokenIDs.length;\n    for(i=0; i < len; i++){\n      const realId = this.state.allTokenIDs[i];\n      const symbol = this.state.allTokenData[realId].symbol;\n      tokenOptions.push(<option value={realId}>{symbol}</option>);\n    }\n    return(\n    <Row className=\"add-token-row\">\n      <Col><h4 style={{marginTop:\"7px\"}}>Add pool to protocol</h4></Col>\n\n      <Col>\n        <Form>\n        <Form.Group>\n          <Form.Control size=\"md\" as=\"select\" style={{marginTop:\"5px\"}} onChange={ this.handleChangeAddToken } >\n          {tokenOptions}\n          </Form.Control>\n        </Form.Group>\n        </Form>\n      </Col>\n\n      <Col>\n      <button className=\"button-addToken\"\n          type=\"button\"\n          style={{marginTop:\"5px\"}}\n          onClick={this.addToken.bind(this)}\n      >Add Pool</button>\n      </Col>\n    </Row>\n  );\n  }\n\n  render() {\n\n    return (\n      <div className=\"container-fluid\">\n      <Navbar>\n        <a className=\"navbar-brand\" href=\"#\">\n          <img src={logo} width=\"80\" height=\"40\" className=\"d-inline-block align-top\" alt=\"\" />\n        </a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarCollapse\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">Features</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">Pricing</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#\">Disabled</a>\n            </li>\n          </ul>\n        </div>\n      </Navbar>\n\n      <Container className=\"container\">\n        <Row className=\"rows\">\n          <Col className=\"columns columns-left\" lg={4}>\n          <h3 style={{marginTop: \"18px\"}}>Your Balance</h3>\n          <hr/>\n          <div>  <Balance/> </div>\n          </Col>\n\n          <Col sm={1}><br/></Col>\n\n          <Col className=\"columns columns-right\" lg={7}>\n            <Container>\n              <ActionButtons/>\n            </Container>\n          </Col>\n        </Row>\n\n        <PriceUpdate loadedTokens={this.state.addedTokenIDs}/>\n\n        {this.displayAddTokenOption()}\n\n      </Container>\n\n      <div className=\"footer\">\n      <Navbar expand=\"lg\" sticky=\"bottom\" className=\"footer\">\n        <Navbar.Brand href=\"#home\">\n          <img src={warwicklogo} width=\"35%\" height=\"35%\"\n\n            alt=\"Warwick University\"\n          />\n        </Navbar.Brand>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Text style={{color: \"white\"}}>\n          @ \"Smart Contracts Lending\" by Ioana Roceanu at University of Warwick\n          </Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n      </div>\n\n      </div>\n    );\n  }\n}\n// <!-- <div className=\"tokens\"> {this.renderPrices()} </div> -->\nexport default App;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/reportWebVitals.js",[],"/Users/ioanaroceanu/Documents/web-lending-app/src/price_update.js",["62","63","64","65","66","67","68","69","70","71"],"import React, {Component} from 'react';\nimport Web3 from 'web3';\nimport {Transaction} from 'ethereumjs-tx';\nimport {Container, Row, Col, Navbar, Button, Form} from 'react-bootstrap';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\nimport './price_update.css';\nimport {getTokenAPIPrices} from './priceUpdate.js';\n\n\nclass PriceUpdate extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      tokensLoaded: false,\n      pricesDict: {}, // this is a dictionary realID -> [name,price]\n      tokenIDs: [],\n      seconds: 0,\n      liquidityPool: null,\n      exchange: null,\n      web3: null,\n      noLoadedTokens: 50\n    };\n  }\n\n  ///// UTILS\n\n\n  // give token from owner to another account\n  async giveTokenTo(account, owner, tokenInstance, amount){\n    //send tokens to adresses\n    let value = this.state.web3.utils.toHex(amount);\n    await tokenInstance.methods.transfer(account, value).send({from: owner}).on('transactionHash', function(hash){\n        //console.log(hash);\n      });\n    var balance;\n    await tokenInstance.methods.balanceOf(account).call().then(res =>{ balance = res; });\n  }\n\n  // give permission to contract to retreive tokens\n  async givePermissionToContract(account, privateKey, contractAddress, amount, tokenInstance, tokenAddress){\n    var nonce = await this.state.web3.eth.getTransactionCount(account);\n    const rawTx = {\n      nonce: nonce,\n      from: account,\n      to: tokenAddress,\n      gasLimit: this.state.web3.utils.toHex(200000),\n      data: tokenInstance.methods.approve(contractAddress, amount).encodeABI()\n    };\n    // private key of the second account\n    var privateKey = new Buffer(privateKey, 'hex');\n    var tx = new Transaction(rawTx);\n    tx.sign(privateKey);\n    var serializedTx = tx.serialize();\n    this.state.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', console.log);\n  }\n\n  componentWillMount(){\n    //this.leadBlockchainData();\n    this.uploadPrices();\n  }\n\n  async uploadPrices(){\n    const prices = await getTokenAPIPrices();\n    this.setState({pricesDict: prices, isLoaded:true});\n    console.log(\"Prices have been updated\");\n    console.log(this.state.pricesDict);\n  }\n\n  async updatePricesFromOwner(token, web3, account){\n\n    const privateKey = new Buffer('8ba9b5140d9b73afbdbb177247abe308242eaa55a955a52f7ebf2c2ca8aae99a', 'hex');\n    var nonce = await web3.eth.getTransactionCount(account);\n    const gasLimit = await web3.utils.toHex(2000000);\n    const data = await this.state.exchange.methods.updatePrice(token, 800).encodeABI();\n    const gasPrice = await web3.utils.toWei('100', 'gwei');\n    const gasPriceHex = await web3.utils.toHex(gasPrice);\n    const rawTx = {\n      nonce: nonce,\n      from: account,\n      to: Exchange_ADD,\n      gasLimit: gasLimit,\n      gasPrice: gasPriceHex,\n      chainId: 3,\n      data: data\n    };\n    // private key of the second account\n    var tx = new Transaction(rawTx, {'chain':'ropsten'});\n    tx.sign(privateKey);\n    var serializedTx = tx.serialize();\n    console.log(\"Send signed transaction on price update\");\n    const receipt = await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\n    console.log(receipt);\n  }\n\n  async updateContractsPrices(token, web3, account){\n\n    const tokenAddress = await web3.utils.toChecksumAddress(token);\n    // update exchange prices\n    await window.ethereum.enable();\n    await this.state.exchange.methods.updatePrice(token, 800).send({from: account});\n    // update liquidity pool prices\n    await window.ethereum.enable();\n    await this.state.liquidityPool.methods.updateTokenPrice(token).send({from: account});\n    const priceExchange = await this.state.exchange.methods.getPrice(tokenAddress).call();\n    console.log(\"this is the current price in the exchange\");\n    console.log(priceExchange);\n  }\n\n  async leadBlockchainData(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    //this.setState({web3: web3});\n    const network = await web3.eth.net.getNetworkType();\n    console.log(\"network:\",network);\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD);\n    const exinstance = new web3.eth.Contract(Exchange_ABI, Exchange_ADD);\n    this.setState({liquidityPool: lpinstance, exchange: exinstance});\n\n    // create the token (deploy and create pool in LP and exchange)\n    /*var address = await this.createToken(web3,'Weth',80, 70, 0, 7, 200, 1, 490);*/\n    const address = await web3.utils.toChecksumAddress('0xc91acB1Ad59E1d839bF3556A8Ec8d62129E24319');\n    console.log(\"This is the token's address\");\n    console.log(address);\n    const account = await web3.utils.toChecksumAddress('0x614114ec0a5a6def6172d8cb210facb63d459c04');\n    await this.updatePricesFromOwner(address, web3, account);\n\n    console.log(\"NOw we are asking for the price\");\n    await window.ethereum.enable();\n    const priceExchange = await this.state.exchange.methods.getPrice(address).call();\n    console.log(\"this is the current price in the exchange\");\n    console.log(priceExchange);\n    //await this.updateContractsPrices(address, web3, account);\n  }\n\n\n/*  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ seconds: this.state.seconds + 10 }), 30000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }*/\n\n  componentDidUpdate(prevProps, prevState) {\n    // make an API request only if 5 minutes passed - 30 seconds\n    /*if(prevState.seconds != this.state.seconds){\n      const url = \"https://uniswapmyapi.herokuapp.com/tokenPrices\";\n      fetch(url)\n      .then(res => res.json())\n      .then((data) => {\n\n        if(!this.state.tokensLoaded){ // create price dictionary and array of token ids\n          let object = data.prices;\n          let tmprIDs = [];\n          let tmprPrices = {};\n          // for every token build dictionary entry id:[symbol, price]\n          // and array of token's ids\n          var i;\n          for(i = 0; i < 300; i++){\n            let id = object[i][\"id\"];\n            tmprIDs.push(id);\n            let symbol = object[i][\"symbol\"];\n            let price = object[i][\"prices\"];\n            tmprPrices[id] = [symbol, price];\n          }\n          this.setState({tokenIDs: tmprIDs, pricesDict: tmprPrices, tokensLoaded: true });\n\n        }else { // update prices from dictionary\n          let object = data.prices;\n          let copyDict = {...this.state.pricesDict};\n          var i;\n          for(i = 0; i < 300; i++){\n            let tokenId = this.state.tokenIDs[i];\n            // !!!! assuming the API data is in the same order as the tokenIds array\n            copyDict[tokenId][1] = object[i][\"prices\"];\n          }\n          this.setState({pricesDict: copyDict});\n        }\n        this.setState({isLoaded: true});\n      })\n      .catch(console.log);\n    }*/\n\n  }\n\n  displayTokenDetails(tokenID){\n    return(\n      <Row className=\"token-details-row\">\n        <Col lg={6} className=\"column symbol\">{this.state.pricesDict[tokenID][0]}</Col>\n        <Col lg={2} className=\"column symbol\">3.15%</Col>\n        <Col lg={2} className=\"column symbol\">4.12%</Col>\n        <Col lg={2} className=\"column symbol\">{this.state.pricesDict[tokenID][1].toFixed(4)}</Col>\n      </Row>\n    )\n  }\n\n  displayAllTokenDetails(noToLoad){\n    let allTokensDetails = [];\n    var i;\n    if(this.props.loadedTokens.length < noToLoad){\n      noToLoad = this.props.loadedTokens.length;\n    }\n    for(i=0; i < noToLoad; i++){\n      console.log(\"this is one token to be added\");\n      console.log(this.props.loadedTokens[i]);\n      allTokensDetails.push(this.displayTokenDetails(this.props.loadedTokens[i]));\n    }\n    return allTokensDetails;\n  }\n\n  loadMore(){\n    this.setState({noLoadedTokens: this.state.noLoadedTokens + 50});\n  }\n\n  showLoadMoreButton(){\n    if(this.state.noLoadedTokens < 300){\n      return(<button className=\"button-loadMore\" type=\"button\" onClick={(e) => this.loadMore()}>Load 50 more...</button>);\n    }\n  }\n\n\n  render() {\n    const updatedTokenList = this.state.tokenIDs.map((token)=>{\n      return(\n              <li key={token.toString()}>\n                  {this.state.pricesDict[token][0]} : {this.state.pricesDict[token][1]}\n              </li>\n          );\n    });\n\n    var isLoaded = this.state.isLoaded;\n\n    if (!isLoaded){\n      return(<div>Loading...</div>);\n    }\n    else{\n      return (\n        <div className=\"container\">\n          <Row><h2 className=\"markets\">Markets</h2></Row>\n          <Row className=\"heading-details-row\">\n            <Col lg={6} className=\"details-headings\">Symbol</Col>\n            <Col lg={2} className=\"details-headings\">Deposit APY</Col>\n            <Col lg={2} className=\"details-headings\">Borrow APY</Col>\n            <Col lg={2} className=\"details-headings\">Price</Col>\n          </Row>\n          {this.displayAllTokenDetails(this.state.noLoadedTokens)}\n          <Row>\n          {this.showLoadMoreButton()}\n          </Row>\n\n        </div>\n      );\n    }\n\n\n  }\n\n\n\n}\n\nexport default PriceUpdate;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/abis/abi.js",[],"/Users/ioanaroceanu/Documents/web-lending-app/src/Balance.js",["72","73","74","75","76","77","78","79","80","81","82"],"import React, {Component} from 'react';\nimport './Balance.css';\nimport PriceUpdate from './price_update';\nimport Web3 from 'web3';\nimport {Container, Row, Col, Navbar} from 'react-bootstrap';\nimport logo from './logo.png';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\nimport {loadWeb3, getAccount, getUserDeposit, getUserLoanDetails} from './utils.js';\n\n\nclass Balance extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAddress: null,\n      userDeposit: 0,\n      depositedToken: '',\n      userCollateral: 0,\n      collateralToken: '',\n      userOwed: 0,\n      owedToken:'',\n      liquidityPool: null,\n    };\n  }\n\n  componentWillMount(){\n    this.leadBlockchainData();\n  }\n\n  async leadBlockchainData(){\n    const web3 = await loadWeb3();\n    const account = await getAccount(web3);\n\n    //initialise instance of LP contract\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD);\n    this.setState({liquidityPool: lpinstance, userAddress: account});\n\n    /*const [depositValue, depFakeTokenID] = await getUserDeposit(web3,this.state.userAddress, this.state.liquidityPool);\n    const [collateral, collFakeTokenID, owed, borrFakeTokenID] = await getUserLoanDetails(web3,this.state.userAddress, this.state.liquidityPool);\n    this.setState({userDeposit: depositValue, userCollateral: collateral, userOwed: owed});*/\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n      <div className=\"box\">\n      <Container className=\"container\">\n        <Row className=\"rows\">\n          <Col sm={4}>\n            <div className=\"action-name\">Deposit:</div>\n          </Col>\n          <Col sm={8} >\n            <div className=\"deposit-value\">$30000</div>\n            <div className=\"deposit-token\">34 ETH</div>\n          </Col>\n        </Row>\n      </Container>\n\n      <br/>\n\n      </div>\n      <div className=\"box\">\n      <Container className=\"container\">\n\n        <h4 className=\"loan-heading\">Loan</h4>\n        <hr/>\n        <Row>\n          <Col sm={4}>\n            <div className=\"action-name\">Collateral:</div>\n          </Col>\n          <Col sm={8} >\n            <div className=\"deposit-value\">$10000</div>\n            <div className=\"deposit-token\">34 ETH</div>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={4}>\n            <div className=\"action-name\">Owed:</div>\n          </Col>\n          <Col sm={8} >\n            <div className=\"deposit-value\">$103</div>\n            <div className=\"deposit-token\">100 DAI</div>\n          </Col>\n        </Row>\n\n      </Container>\n      </div>\n      </div>\n    );\n  }\n}\nexport default Balance;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/ActionButtons.js",["83","84"],"import React, {Component} from 'react';\nimport {Container, Row, Col, Navbar, Button} from 'react-bootstrap';\nimport './ActionButtons.css';\nimport ActionView from './DepositView.js';\n\nclass ActionButtons extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonColors: [\"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\"],\n      actionType: \"Deposit\",\n    };\n  }\n\n  modifyStyle(buttonNo){\n    const newColors = [\"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\"];\n    newColors[buttonNo] = \"#302f75\";\n    const action = [\"Deposit\", \"Borrow\", \"Collateral\", \"Redeem\", \"Repay\"];\n    this.setState({buttonColors: newColors, actionType: action[buttonNo]});\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"container-fluid\">\n      <Container>\n      <Row>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[0]}} type=\"button radio\" onClick={(e) => this.modifyStyle(0)}>Deposit</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[1]}} type=\"button radio\" onClick={(e) => this.modifyStyle(1)}>Borrow</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[2]}}  type=\"button radio\" onClick={(e) => this.modifyStyle(2)}>Collateral</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[3]}}  type=\"button radio\" onClick={(e) => this.modifyStyle(3)}>Redeem</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[4]}}  type=\"button radio\" onClick={(e) => this.modifyStyle(4)}>Repay</button></Col>\n      </Row>\n      <hr className=\"hrButtons\"/>\n      <Row> <ActionView type={this.state.actionType}/> </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n// <!-- <div className=\"tokens\"> {this.renderPrices()} </div> -->\nexport default ActionButtons;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/DepositView.js",["85","86","87"],"import React, {Component} from 'react';\nimport {Container, Row, Col, Form} from 'react-bootstrap';\nimport './DepositView.css';\n\n\n\nclass ActionView extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    if(this.props.type == \"Collateral\"){\n      return (\n        <div className=\"container\">\n        <div>\n        <Container>\n          <Row>\n          <h4>Add Collateral from wallet</h4>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"sm\" type=\"email\" placeholder=\"e.g 450\" className=\"valueInput\"/>\n              </Form.Group>\n\n              <Form.Group controlId=\"exampleForm.ControlSelect1\" className=\"topTokenInput\">\n                <Form.Control size=\"sm\" as=\"select\" className=\"tokenInput\">\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                </Form.Control>\n              </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"sm\" type=\"email\" placeholder=\"1000\" className=\"valueInput\"/>\n              </Form.Group>\n\n            <Form.Group className=\"topTokenInput\">\n              <Form.Control size=\"sm\" className=\"tokenInput\" placeholder=\"USD\" disabled />\n            </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <button type=\"button\" className=\"collateral-submit\">Submit Transaction</button>\n          </Row>\n\n        </Container>\n        </div>\n\n        <hr/>\n\n        <div>\n        <Container>\n          <Row>\n          <h4>Add Collateral from deposit</h4>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"sm\" type=\"email\" placeholder=\"e.g 450\" className=\"valueInput\"/>\n              </Form.Group>\n\n              <Form.Group controlId=\"exampleForm.ControlSelect1\" className=\"topTokenInput\">\n                <Form.Control size=\"sm\" as=\"select\" className=\"tokenInput\">\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                </Form.Control>\n              </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"sm\" type=\"email\" placeholder=\"1000\" className=\"valueInput\"/>\n              </Form.Group>\n\n            <Form.Group className=\"topTokenInput\">\n              <Form.Control size=\"sm\" className=\"tokenInput\" placeholder=\"USD\" disabled />\n            </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <button type=\"button\" className=\"collateral-submit\">Submit Transaction</button>\n          </Row>\n\n        </Container>\n        </div>\n        </div>\n      );\n    }else{\n      return (\n        <div className=\"container\">\n\n        <div>\n        <Container>\n          <Row>\n          <div><br/></div>\n          </Row>\n          <Row>\n          <h3>{this.props.type}</h3>\n          </Row>\n          <br/>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"lg\" type=\"email\" placeholder=\"e.g 450\" className=\"valueInput\"/>\n              </Form.Group>\n\n              <Form.Group controlId=\"exampleForm.ControlSelect1\" className=\"topTokenInput\">\n                <Form.Control size=\"lg\" as=\"select\" className=\"tokenInput\">\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                </Form.Control>\n              </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n            <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n              <Form.Control size=\"lg\" type=\"email\" placeholder=\"1000\" className=\"valueInput\"/>\n            </Form.Group>\n\n            <Form.Group className=\"topTokenInput\">\n              <Form.Control size=\"lg\" className=\"tokenInput\" placeholder=\"USD\" disabled />\n            </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <button type=\"button\" className=\"submitButton\">Submit Transaction</button>\n\n          </Row>\n\n        </Container>\n        </div>\n\n        </div>\n      );\n    }\n\n  }\n}\nexport default ActionView;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/utils.js",["88","89","90","91","92","93","94","95"],"/Users/ioanaroceanu/Documents/web-lending-app/src/priceUpdate.js",["96","97","98","99","100","101","102","103"],"import Web3 from 'web3';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\n\n\n// returns {realID: price}\nexport async function getTokenAPIPrices(){\n  const url = \"https://uniswapmyapi.herokuapp.com/tokenPrices\";\n  let response = await fetch(url);\n  let data = await response.json();\n  // create price dictionary and array of token ids\n  let object = data.prices;\n  let tmprPrices = {};\n  // for every token build dictionary entry id:[symbol, price]\n  // and array of token's ids\n  var i;\n  for(i = 0; i < 300; i++){\n    let id = object[i][\"id\"];\n    let symbol = object[i][\"symbol\"];\n    let price = object[i][\"prices\"];\n    tmprPrices[id] = [symbol, price];\n  }\n  return tmprPrices;\n\n}\n",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":6,"column":38,"nodeType":"110","messageId":"111","endLine":6,"endColumn":44},{"ruleId":"108","severity":1,"message":"112","line":10,"column":9,"nodeType":"110","messageId":"111","endLine":10,"endColumn":26},{"ruleId":"108","severity":1,"message":"113","line":10,"column":45,"nodeType":"110","messageId":"111","endLine":10,"endColumn":56},{"ruleId":"108","severity":1,"message":"114","line":11,"column":75,"nodeType":"110","messageId":"111","endLine":11,"endColumn":84},{"ruleId":"108","severity":1,"message":"115","line":11,"column":86,"nodeType":"110","messageId":"111","endLine":11,"endColumn":95},{"ruleId":"108","severity":1,"message":"116","line":11,"column":97,"nodeType":"110","messageId":"111","endLine":11,"endColumn":111},{"ruleId":"117","severity":1,"message":"118","line":131,"column":9,"nodeType":"119","endLine":131,"endColumn":46},{"ruleId":"117","severity":1,"message":"118","line":140,"column":15,"nodeType":"119","endLine":140,"endColumn":48},{"ruleId":"117","severity":1,"message":"118","line":143,"column":15,"nodeType":"119","endLine":143,"endColumn":48},{"ruleId":"117","severity":1,"message":"118","line":146,"column":15,"nodeType":"119","endLine":146,"endColumn":48},{"ruleId":"117","severity":1,"message":"118","line":149,"column":15,"nodeType":"119","endLine":149,"endColumn":48},{"ruleId":"108","severity":1,"message":"120","line":4,"column":9,"nodeType":"110","messageId":"111","endLine":4,"endColumn":18},{"ruleId":"108","severity":1,"message":"121","line":4,"column":30,"nodeType":"110","messageId":"111","endLine":4,"endColumn":36},{"ruleId":"108","severity":1,"message":"109","line":4,"column":38,"nodeType":"110","messageId":"111","endLine":4,"endColumn":44},{"ruleId":"108","severity":1,"message":"122","line":4,"column":46,"nodeType":"110","messageId":"111","endLine":4,"endColumn":50},{"ruleId":"108","severity":1,"message":"114","line":5,"column":75,"nodeType":"110","messageId":"111","endLine":5,"endColumn":84},{"ruleId":"108","severity":1,"message":"115","line":5,"column":86,"nodeType":"110","messageId":"111","endLine":5,"endColumn":95},{"ruleId":"108","severity":1,"message":"116","line":5,"column":97,"nodeType":"110","messageId":"111","endLine":5,"endColumn":111},{"ruleId":"108","severity":1,"message":"123","line":38,"column":72,"nodeType":"110","messageId":"111","endLine":38,"endColumn":79},{"ruleId":"124","severity":1,"message":"125","line":52,"column":9,"nodeType":"110","messageId":"126","endLine":52,"endColumn":19},{"ruleId":"108","severity":1,"message":"127","line":223,"column":11,"nodeType":"110","messageId":"111","endLine":223,"endColumn":27},{"ruleId":"108","severity":1,"message":"128","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":19},{"ruleId":"108","severity":1,"message":"129","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":12},{"ruleId":"108","severity":1,"message":"121","line":5,"column":30,"nodeType":"110","messageId":"111","endLine":5,"endColumn":36},{"ruleId":"108","severity":1,"message":"130","line":6,"column":8,"nodeType":"110","messageId":"111","endLine":6,"endColumn":12},{"ruleId":"108","severity":1,"message":"131","line":7,"column":47,"nodeType":"110","messageId":"111","endLine":7,"endColumn":59},{"ruleId":"108","severity":1,"message":"132","line":7,"column":61,"nodeType":"110","messageId":"111","endLine":7,"endColumn":73},{"ruleId":"108","severity":1,"message":"114","line":7,"column":75,"nodeType":"110","messageId":"111","endLine":7,"endColumn":84},{"ruleId":"108","severity":1,"message":"115","line":7,"column":86,"nodeType":"110","messageId":"111","endLine":7,"endColumn":95},{"ruleId":"108","severity":1,"message":"116","line":7,"column":97,"nodeType":"110","messageId":"111","endLine":7,"endColumn":111},{"ruleId":"108","severity":1,"message":"133","line":8,"column":31,"nodeType":"110","messageId":"111","endLine":8,"endColumn":45},{"ruleId":"108","severity":1,"message":"134","line":8,"column":47,"nodeType":"110","messageId":"111","endLine":8,"endColumn":65},{"ruleId":"108","severity":1,"message":"121","line":2,"column":30,"nodeType":"110","messageId":"111","endLine":2,"endColumn":36},{"ruleId":"108","severity":1,"message":"109","line":2,"column":38,"nodeType":"110","messageId":"111","endLine":2,"endColumn":44},{"ruleId":"108","severity":1,"message":"135","line":2,"column":25,"nodeType":"110","messageId":"111","endLine":2,"endColumn":28},{"ruleId":"136","severity":1,"message":"137","line":9,"column":3,"nodeType":"138","messageId":"139","endLine":11,"endColumn":4},{"ruleId":"140","severity":1,"message":"141","line":14,"column":24,"nodeType":"142","messageId":"143","endLine":14,"endColumn":26},{"ruleId":"108","severity":1,"message":"144","line":2,"column":9,"nodeType":"110","messageId":"111","endLine":2,"endColumn":26},{"ruleId":"108","severity":1,"message":"145","line":2,"column":28,"nodeType":"110","messageId":"111","endLine":2,"endColumn":45},{"ruleId":"108","severity":1,"message":"131","line":2,"column":47,"nodeType":"110","messageId":"111","endLine":2,"endColumn":59},{"ruleId":"108","severity":1,"message":"132","line":2,"column":61,"nodeType":"110","messageId":"111","endLine":2,"endColumn":73},{"ruleId":"108","severity":1,"message":"114","line":2,"column":75,"nodeType":"110","messageId":"111","endLine":2,"endColumn":84},{"ruleId":"108","severity":1,"message":"146","line":68,"column":9,"nodeType":"110","messageId":"111","endLine":68,"endColumn":17},{"ruleId":"108","severity":1,"message":"147","line":80,"column":7,"nodeType":"110","messageId":"111","endLine":80,"endColumn":15},{"ruleId":"148","severity":1,"message":"149","line":143,"column":35,"nodeType":"150","messageId":"151","endLine":143,"endColumn":37},{"ruleId":"108","severity":1,"message":"129","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":12},{"ruleId":"108","severity":1,"message":"144","line":2,"column":9,"nodeType":"110","messageId":"111","endLine":2,"endColumn":26},{"ruleId":"108","severity":1,"message":"145","line":2,"column":28,"nodeType":"110","messageId":"111","endLine":2,"endColumn":45},{"ruleId":"108","severity":1,"message":"131","line":2,"column":47,"nodeType":"110","messageId":"111","endLine":2,"endColumn":59},{"ruleId":"108","severity":1,"message":"132","line":2,"column":61,"nodeType":"110","messageId":"111","endLine":2,"endColumn":73},{"ruleId":"108","severity":1,"message":"114","line":2,"column":75,"nodeType":"110","messageId":"111","endLine":2,"endColumn":84},{"ruleId":"108","severity":1,"message":"115","line":2,"column":86,"nodeType":"110","messageId":"111","endLine":2,"endColumn":95},{"ruleId":"108","severity":1,"message":"116","line":2,"column":97,"nodeType":"110","messageId":"111","endLine":2,"endColumn":111},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'getTokenAPIPrices' is defined but never used.","'deployToken' is defined but never used.","'ERC20_ABI' is defined but never used.","'Token_ABI' is defined but never used.","'Token_BYTECODE' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Container' is defined but never used.","'Navbar' is defined but never used.","'Form' is defined but never used.","'balance' is assigned a value but never used.","no-redeclare","'privateKey' is already defined.","redeclared","'updatedTokenList' is assigned a value but never used.","'PriceUpdate' is defined but never used.","'Web3' is defined but never used.","'logo' is defined but never used.","'Exchange_ADD' is defined but never used.","'Exchange_ABI' is defined but never used.","'getUserDeposit' is defined but never used.","'getUserLoanDetails' is defined but never used.","'Col' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'LiquidityPool_ABI' is defined but never used.","'LiquidityPool_ADD' is defined but never used.","'nonceHex' is assigned a value but never used.","'instance' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]