[{"/Users/ioanaroceanu/Documents/web-lending-app/src/index.js":"1","/Users/ioanaroceanu/Documents/web-lending-app/src/App.js":"2","/Users/ioanaroceanu/Documents/web-lending-app/src/reportWebVitals.js":"3","/Users/ioanaroceanu/Documents/web-lending-app/src/price_update.js":"4","/Users/ioanaroceanu/Documents/web-lending-app/src/abis/abi.js":"5","/Users/ioanaroceanu/Documents/web-lending-app/src/Balance.js":"6","/Users/ioanaroceanu/Documents/web-lending-app/src/ActionButtons.js":"7","/Users/ioanaroceanu/Documents/web-lending-app/src/DepositView.js":"8","/Users/ioanaroceanu/Documents/web-lending-app/src/utils.js":"9","/Users/ioanaroceanu/Documents/web-lending-app/src/priceUpdate.js":"10","/Users/ioanaroceanu/Documents/web-lending-app/src/LiquidityView.js":"11","/Users/ioanaroceanu/Documents/web-lending-app/src/Liquidation.js":"12"},{"size":541,"mtime":1611497412043,"results":"13","hashOfConfig":"14"},{"size":10056,"mtime":1615284672035,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1610542469841,"results":"16","hashOfConfig":"14"},{"size":7421,"mtime":1615274829474,"results":"17","hashOfConfig":"14"},{"size":40010,"mtime":1615226799037,"results":"18","hashOfConfig":"14"},{"size":5702,"mtime":1615274242142,"results":"19","hashOfConfig":"14"},{"size":2083,"mtime":1614093987069,"results":"20","hashOfConfig":"14"},{"size":8210,"mtime":1615275654054,"results":"21","hashOfConfig":"14"},{"size":18420,"mtime":1615318551763,"results":"22","hashOfConfig":"14"},{"size":848,"mtime":1614093730226,"results":"23","hashOfConfig":"14"},{"size":5179,"mtime":1615224339034,"results":"24","hashOfConfig":"14"},{"size":7762,"mtime":1615318468421,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"9le6z9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ioanaroceanu/Documents/web-lending-app/src/index.js",[],["58","59"],"/Users/ioanaroceanu/Documents/web-lending-app/src/App.js",["60","61","62","63","64","65","66","67","68","69","70"],"import React, {Component} from 'react';\nimport './App.css';\nimport PriceUpdate from './price_update';\nimport Balance from './Balance.js'\nimport Web3 from 'web3';\nimport {Container, Row, Col, Navbar, Button, Form} from 'react-bootstrap';\nimport logo from './logoTr.png';\nimport warwicklogo from './warwicklogo.png';\nimport ActionButtons from './ActionButtons.js';\nimport Liquidation from './Liquidation.js';\nimport {getLoadedTokens, registerLoadedToken, getTokenAPIData, deployToken, getTokenAPIPrice, getAccount, createToken, addLoadedTokens, updateExchangePricesFromOwner, updateLiquidityPoolPrices} from './utils.js';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi';\nimport {getTokenAPIPrices} from './priceUpdate.js';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      prices: {}, //this is a dictionary realID -> [symbol,price]\n      toBeAdded: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      web3: null,\n      liquidityPool: null,\n      exchange: null,\n      addedTokenIDs: [], //realIDs\n      realToFakeID: {}, // {realID: fakeID}\n      allTokenIDs: [], // realIDs\n      allTokenData: {}, // {realID: {symbol: -, utilisationRate: -, collateral: -, baseRate: -, slope1:-, slope2:-, sread: -, price: -}\n      connectedAccount: null,\n      transactionProgress: \"Connected Address\",\n      trustedToken: [\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"0x6b175474e89094c44da98b954eedeac495271d0f\", \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\"0xdac17f958d2ee523a2206206994597c13d831ec7\", \"0x57ab1ec28d129707052df4df418d58a2d46d5f51\", \"0x4fabb145d64652a948d72533023f6e7a623c7c53\",\"0x0000000000085d4780b73119b644ae5ecd22b376\"],\n      balanceSwitch: true,\n    };\n  }\n\n  async uploadPrices(){\n    const prices = await getTokenAPIPrices(this.state.allTokenData);\n    this.setState({prices: prices});\n  }\n\n\n  componentWillMount(){\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData(){\n    // load web3\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const network = await web3.eth.net.getNetworkType();\n    const acc = await getAccount(web3);\n    this.setState({web3: web3, connectedAccount: acc})\n\n    // load contracts\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD, {transactionConfirmationBlocks: 1});\n    const exinstance = new web3.eth.Contract(Exchange_ABI, Exchange_ADD);\n\n    //get all token's data from api\n    const [ids, data]= await getTokenAPIData();\n    this.setState({allTokenData: data, allTokenIDs: ids, liquidityPool: lpinstance, exchange: exinstance});\n\n    // get all deployed tokens\n    const addedTokensData = await getLoadedTokens();\n    let tokens = [];\n    let real_fake = {};\n    var i;\n    for(i=0; i < addedTokensData.length; i++){\n      tokens.push(addedTokensData[i].realID);\n      real_fake[addedTokensData[i].realID] = addedTokensData[i].fakeID;\n    }\n    this.setState({addedTokenIDs: tokens, realToFakeID: real_fake});\n\n    await this.uploadPrices();\n    this.setState({loading: false});\n  }\n\n  async addToken(){\n    if(this.state.addedTokenIDs.includes(this.state.toBeAdded)){\n      alert(\"This token already has a pool.\")\n    }else{\n      // get selected token's details to pass to the create function\n      let tokenDetails = {};\n      const tokenData = this.state.allTokenData[this.state.toBeAdded];\n      tokenDetails.symbol = tokenData.symbol;\n      tokenDetails.utilisation = Math.round(tokenData.utilisationRate);\n      tokenDetails.collateral = Math.round(tokenData.collateral);\n      tokenDetails.baseRate = tokenData.baseRate;\n      tokenDetails.slope1 = tokenData.slope1;\n      tokenDetails.slope2 = tokenData.slope2;\n      tokenDetails.spread = tokenData.spread;\n      let price = await getTokenAPIPrice(this.state.toBeAdded);\n      tokenDetails.price = Math.round(price*1000);\n      tokenDetails.trusted = false;\n      if(this.state.trustedToken.includes(this.state.toBeAdded)){\n        tokenDetails.trusted = true;\n      }\n      // get current connected account\n      const user = await getAccount(this.state.web3);\n      // deploy and add token to contracts\n      const fakeTokenID = await createToken(user, this.state.web3, tokenDetails, this.state.exchange, this.state.liquidityPool);\n      // register new added token\n      const newEntry = {...this.state.realToFakeID};\n      newEntry[this.state.toBeAdded] = fakeTokenID;\n      // send POST reqest to server about the new token\n      await registerLoadedToken(tokenData.symbol, this.state.toBeAdded, fakeTokenID);\n      // change state\n      this.setState({realToFakeID: newEntry});\n    }\n  }\n\n  handleChangeAddToken = (e) => {\n    this.setState({ toBeAdded: e.target.value });\n  }\n\n\n  compileSymbolforFakeIDs(){\n    let dict = {};\n    var i;\n    for(i=0; i < this.state.addedTokenIDs.length; i++ ){\n      let realID = this.state.addedTokenIDs[i];\n      let fakeID = this.state.realToFakeID[realID];\n      let symbol = this.state.allTokenData[realID].symbol;\n      let price = this.state.prices[realID][1];\n      dict[fakeID] = {symbol: symbol, realID: realID, price: price};\n    }\n    return dict;\n    this.uploadPrices();\n  }\n\n  //// RENDER COMPONENTS\n  displayAddTokenOption(){\n    var tokenOptions = [];\n    var i =0;\n    const len = this.state.allTokenIDs.length;;\n    for(i=0; i < len; i++){\n      const realId = this.state.allTokenIDs[i];\n      const symbol = this.state.allTokenData[realId].symbol;\n      tokenOptions.push(<option value={realId}>{symbol}</option>);\n    }\n    return(\n    <Row className=\"add-token-row\">\n      <Col><h4 style={{marginTop:\"7px\"}}>Add pool to protocol</h4></Col>\n\n      <Col>\n        <Form>\n        <Form.Group>\n          <Form.Control size=\"md\" as=\"select\" style={{marginTop:\"5px\"}} onChange={ this.handleChangeAddToken } >\n          {tokenOptions}\n          </Form.Control>\n        </Form.Group>\n        </Form>\n      </Col>\n\n      <Col>\n      <button className=\"button-addToken\"\n          type=\"button\"\n          style={{marginTop:\"5px\"}}\n          onClick={this.addToken.bind(this)}\n      >Add Pool</button>\n      </Col>\n    </Row>\n  );\n  }\n\n  handleLoadingTxThis(loading){\n    if(loading){\n      this.setState({transactionProgress: \"Loading Transaction...\"});\n    }else if(!loading){\n      this.setState({transactionProgress: \"Connected Address\"});\n      this.setState({balanceSwitch: !this.state.balanceSwitch});\n    }\n  }\n\n  checkbalanceSwitch(){\n    console.log('this is balance switch given');\n    console.log(this.state.balanceSwitch);\n    return this.state.balanceSwitch;\n  }\n\n  render() {\n\n    if(this.state.loading){\n      return(<div>Page is loading...</div>);\n    } else{\n      // to give to the Balance component\n      const tokensSymbolforFakeIDs = this.compileSymbolforFakeIDs();\n\n      // compile list {tokenFakeID, tokenRealID, symbol}\n      var i;\n      let listForAction = [];\n      let pricesForAction = {};\n      for(i = 0; i < this.state.addedTokenIDs.length; i++){\n        let realID = this.state.addedTokenIDs[i];\n        let fakeID = this.state.realToFakeID[realID];\n        let symbol = this.state.allTokenData[realID].symbol;\n        listForAction.push({fakeID: fakeID, realID: realID, symbol: symbol});\n        pricesForAction[fakeID] = this.state.prices[realID][1];\n      }\n\n      return (\n        <div className=\"container-fluid\">\n        <Navbar>\n          <a className=\"navbar-brand\" href=\"#\">\n            <img src={logo} width=\"80\" height=\"40\" className=\"d-inline-block align-top\" alt=\"\" />\n          </a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarCollapse\">\n            <ul className=\"navbar-nav\">\n              <li>\n                <div className=\"connected-address\"> {this.state.transactionProgress}</div>\n              </li>\n              <li>\n                <div className=\"address\"> {this.state.connectedAccount}</div>\n              </li>\n            </ul>\n          </div>\n        </Navbar>\n\n        <Container className=\"container\">\n          <Row className=\"rows\">\n            <Col className=\"columns columns-left\" lg={4}>\n            <h3 style={{marginTop: \"18px\"}}>Your Balance</h3>\n            <hr/>\n            <div>  <Balance tokens={tokensSymbolforFakeIDs} switchBalance={this.checkbalanceSwitch()}/> </div>\n            </Col>\n\n            <Col sm={1}><br/></Col>\n\n            <Col className=\"columns columns-right\" lg={7}>\n              <Container>\n                <ActionButtons handleLoadingTx={this.handleLoadingTxThis.bind(this)} tokens={listForAction} prices={pricesForAction} web3={this.state.web3} liquidityPool={this.state.liquidityPool}/>\n              </Container>\n            </Col>\n          </Row>\n\n          <PriceUpdate loadedTokens={this.state.addedTokenIDs} prices={this.state.prices} realToFakeID={this.state.realToFakeID} switchBalance={this.checkbalanceSwitch()}/>\n\n          {this.displayAddTokenOption()}\n\n          <br/><br/>\n\n          <Liquidation tokens={listForAction} prices={pricesForAction}/>\n\n        </Container>\n\n        <div className=\"footer\">\n        <Navbar expand=\"lg\" sticky=\"bottom\" className=\"footer\">\n          <Navbar.Brand href=\"#home\">\n            <img src={warwicklogo} width=\"35%\" height=\"35%\"\n\n              alt=\"Warwick University\"\n            />\n          </Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text style={{color: \"white\"}}>\n            @ \"Smart Contracts Lending\" by Ioana Roceanu at University of Warwick\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Navbar>\n        </div>\n\n        </div>\n      );\n    }\n  }\n}\n// <!-- <div className=\"tokens\"> {this.renderPrices()} </div> -->\nexport default App;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/reportWebVitals.js",[],"/Users/ioanaroceanu/Documents/web-lending-app/src/price_update.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85"],"import React, {Component} from 'react';\nimport Web3 from 'web3';\nimport {Transaction} from 'ethereumjs-tx';\nimport {Container, Row, Col, Navbar, Button, Form} from 'react-bootstrap';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\nimport './price_update.css';\nimport {getTokenAPIPrices} from './priceUpdate.js';\nimport {getTokenRates} from './utils.js';\nimport LiquidityView from './LiquidityView.js';\n\n\nclass PriceUpdate extends Component {\n\n  constructor(props) {\n    super(props);\n    // props: prices realID -> [symbol,price]\n    // props: loadedTokens [realIDs]\n    // props: realToFakeID real:fake\n    this.state = {\n      isLoaded: false,\n      tokenIDs: [],\n      seconds: 0,\n      liquidityPool: null,\n      exchange: null,\n      web3: null,\n      noLoadedTokens: 50,\n      interestRates: {}, // realID -> {borrowIR, depositIR}\n      showLiquidity: {},\n      reloadedBalance: false,\n    };\n  }\n\n  componentWillMount(){\n    this.loadBlockchainData();\n  }\n\n  async registerTokensIR(){\n    let interestRates = {}\n    var i;\n    for(i=0; i < this.props.loadedTokens.length; i++){\n      const fakeID = this.props.realToFakeID[this.props.loadedTokens[i]];\n      var [borrowir, depoir] = await getTokenRates(this.state.web3, fakeID, this.state.liquidityPool);\n      interestRates[this.props.loadedTokens[i]] = {borrowIR: borrowir, depositIR: depoir};\n    }\n    this.setState({interestRates: interestRates});\n  }\n\n  /*async uploadPrices(){\n    const prices = await getTokenAPIPrices();\n    this.setState({pricesDict: prices, isLoaded:true});\n    this.props.handleChangedPrices(this.state.pricesDict);\n  }*/\n\n  componentWillUpdate(){\n    console.log(\"COMPONENT DID UPDATE\");\n    if(this.state.reloadedBalance == this.props.switchBalance){\n      console.log(\"Balance switch equal\");\n      this.setState({reloadedBalance: !this.props.switchBalance});\n      this.registerTokensIR();\n    }\n  }\n\n  async loadBlockchainData(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    //this.setState({web3: web3});\n    const network = await web3.eth.net.getNetworkType();\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD);\n    const exinstance = new web3.eth.Contract(Exchange_ABI, Exchange_ADD);\n    this.setState({liquidityPool: lpinstance, exchange: exinstance, web3: web3});\n    await this.registerTokensIR();\n    this.setState({isLoaded: true});\n  }\n\n\n/*  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ seconds: this.state.seconds + 10 }), 30000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }*/\n\n  componentDidUpdate(prevProps, prevState) {\n    // make an API request only if 5 minutes passed - 30 seconds\n    /*if(prevState.seconds != this.state.seconds){\n      const url = \"https://uniswapmyapi.herokuapp.com/tokenPrices\";\n      fetch(url)\n      .then(res => res.json())\n      .then((data) => {\n\n        if(!this.state.tokensLoaded){ // create price dictionary and array of token ids\n          let object = data.prices;\n          let tmprIDs = [];\n          let tmprPrices = {};\n          // for every token build dictionary entry id:[symbol, price]\n          // and array of token's ids\n          var i;\n          for(i = 0; i < 300; i++){\n            let id = object[i][\"id\"];\n            tmprIDs.push(id);\n            let symbol = object[i][\"symbol\"];\n            let price = object[i][\"prices\"];\n            tmprPrices[id] = [symbol, price];\n          }\n          this.setState({tokenIDs: tmprIDs, pricesDict: tmprPrices, tokensLoaded: true });\n\n        }else { // update prices from dictionary\n          let object = data.prices;\n          let copyDict = {...this.state.pricesDict};\n          var i;\n          for(i = 0; i < 300; i++){\n            let tokenId = this.state.tokenIDs[i];\n            // !!!! assuming the API data is in the same order as the tokenIds array\n            copyDict[tokenId][1] = object[i][\"prices\"];\n          }\n          this.setState({pricesDict: copyDict});\n        }\n        this.setState({isLoaded: true});\n      })\n      .catch(console.log);\n    }*/\n\n  }\n\n  displayTokenDetails(tokenID){\n    const borrowIR = this.state.interestRates[tokenID].borrowIR;\n    const depositIR = this.state.interestRates[tokenID].depositIR;\n    return(\n      <div>\n      <Row className=\"token-details-row\">\n        <Col lg={6} className=\"column symbol\"><button type=\"button\" className=\"show-liquidity\" onClick={(e) => this.switchShowLiquidity(tokenID)}>{this.props.prices[tokenID][0]}</button>\n        </Col>\n        <Col lg={2} className=\"column symbol\">{depositIR/100}%</Col>\n        <Col lg={2} className=\"column symbol\">{borrowIR/100}%</Col>\n        <Col lg={2} className=\"column symbol\">{this.props.prices[tokenID][1].toFixed(4)}</Col>\n      </Row>\n      {this.showLiquidity(tokenID)}\n      </div>\n    )\n  }\n\n  switchShowLiquidity(tokenID){\n    const fakeID = this.props.realToFakeID[tokenID];\n    var newShowLiq = { ...this.state.showLiquidity}; //create a new copy\n    if(this.state.showLiquidity[fakeID] == null || this.state.showLiquidity[fakeID] == true){\n      newShowLiq[fakeID] = false;\n      this.setState({showLiquidity: newShowLiq});\n    }else if(this.state.showLiquidity[fakeID] == false){\n      newShowLiq[fakeID] = true;\n      this.setState({showLiquidity: newShowLiq});\n    }\n  }\n\n  showLiquidity(tokenID){\n    const fakeID = this.props.realToFakeID[tokenID];\n    if(this.state.showLiquidity[fakeID] == false){\n      return (\n        <Row className=\"liquidity-details\">\n        <Col><LiquidityView fakeID={fakeID} symbol={this.props.prices[tokenID][0]}/></Col>\n        </Row>\n      );\n    }\n  }\n\n  displayAllTokenDetails(noToLoad){\n    let allTokensDetails = [];\n    var i;\n    if(this.props.loadedTokens.length < noToLoad){\n      noToLoad = this.props.loadedTokens.length;\n    }\n    for(i=0; i < noToLoad; i++){\n      allTokensDetails.push(this.displayTokenDetails(this.props.loadedTokens[i]));\n    }\n    return allTokensDetails;\n  }\n\n  loadMore(){\n    this.setState({noLoadedTokens: this.state.noLoadedTokens + 50});\n  }\n\n  showLoadMoreButton(){\n    if(this.state.noLoadedTokens < 300){\n      return(<button className=\"button-loadMore\" type=\"button\" onClick={(e) => this.loadMore()}>Load 50 more...</button>);\n    }\n  }\n\n\n  render() {\n    const updatedTokenList = this.state.tokenIDs.map((token)=>{\n      return(\n              <li key={token.toString()}>\n                  {this.props.prices[token][0]} : {this.props.prices[token][1]}\n              </li>\n          );\n    });\n\n    var isLoaded = this.state.isLoaded;\n\n\n\n    if (!isLoaded){\n      return(<div>Loading...</div>);\n    }\n    else{\n      const displayTokens = this.displayAllTokenDetails(this.state.noLoadedTokens);\n      return (\n        <div className=\"container\">\n          <Row><h2 className=\"markets\">Markets</h2></Row>\n          <Row className=\"heading-details-row\">\n            <Col lg={6} className=\"details-headings\">Symbol</Col>\n            <Col lg={2} className=\"details-headings\">Deposit APY</Col>\n            <Col lg={2} className=\"details-headings\">Borrow APY</Col>\n            <Col lg={2} className=\"details-headings\">Price</Col>\n          </Row>\n          {displayTokens}\n          <Row>\n          {this.showLoadMoreButton()}\n          </Row>\n\n        </div>\n      );\n    }\n\n\n  }\n\n\n\n}\n\nexport default PriceUpdate;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/abis/abi.js",[],"/Users/ioanaroceanu/Documents/web-lending-app/src/Balance.js",["86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"import React, {Component} from 'react';\nimport './Balance.css';\nimport PriceUpdate from './price_update';\nimport Web3 from 'web3';\nimport {Container, Row, Col, Navbar} from 'react-bootstrap';\nimport logo from './logo.png';\nimport {IRVAR_ABI, IRVAR_ADD,LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\nimport {loadWeb3, getAccount, getUserDeposit, getUserLoanDetails, getTokenAPIPrice} from './utils.js';\n\n\nclass Balance extends Component {\n\n  constructor(props) {\n    // props should be list of token's symbols\n    // props switchBalance = true/false\n    super(props);\n    this.state = {\n      isLoaded: false,\n      userAddress: null,\n      userDeposit: 0,\n      depositedToken: '',\n      userCollateral: 0,\n      collateralToken: '',\n      userOwed: 0,\n      owedToken:'',\n      liquidityPool: null,\n      web3: null,\n      reloadedBalance: false,\n    };\n  }\n\n  componentWillMount(){\n    this.loadBlockchainData();\n  }\n\n  componentDidUpdate(prevState){\n    if(this.state.userAddress!=null && this.state.web3 != null && this.state.reloadedBalance == this.props.switchBalance){\n      this.renderBalance(this.state.userAddress);\n      this.setState({reloadedBalance: !this.props.switchBalance});\n    }\n  }\n\n\n  async loadBlockchainData(){\n    const web3 = await loadWeb3();\n    const account = await getAccount(web3);\n    //initialise instance of LP contract\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD, {transactionConfirmationBlocks: 1});\n    this.setState({liquidityPool: lpinstance, userAddress: account, web3: web3});\n    await this.renderBalance(web3);\n    this.setState({isLoaded: true});\n  }\n\n  async renderBalance(web3){\n    const ivarINstance = new this.state.web3.eth.Contract(IRVAR_ABI, IRVAR_ADD);\n    const tokenAdd = await this.state.web3.utils.toChecksumAddress(\"0xb6186735ed018f39b1c7dc07644227a5b28a68dd\");\n    const tokenData = await ivarINstance.methods.tokens(tokenAdd).call();\n    const [depositValue, depFakeTokenID] = await getUserDeposit(this.state.web3,this.state.userAddress, this.state.liquidityPool);\n    const loanDetils = await getUserLoanDetails(this.state.web3,this.state.userAddress, this.state.liquidityPool);\n    const collateral = loanDetils[0];\n    const collFakeTokenID = loanDetils[1];\n    const owed = loanDetils[2];\n    const borrFakeTokenID = loanDetils[3];\n    this.setState({userDeposit: depositValue, userCollateral: collateral, userOwed: owed});\n    this.setState({depositedToken: depFakeTokenID, collateralToken: collFakeTokenID, owedToken: borrFakeTokenID});\n    console.log(\"Finished loading\");\n  }\n\n  render() {\n\n    if(this.state.isLoaded){\n\n      let deposit = '';\n      let depositToken = 'NO DEPOSIT';\n      let depositDollars = 0;\n      if(this.state.depositedToken != ''){\n        deposit = this.state.userDeposit;\n        var fakeID = this.state.depositedToken;\n        if(this.props.tokens[fakeID] == null){\n          fakeID = fakeID.toLowerCase();\n        }\n        depositToken = this.props.tokens[fakeID][\"symbol\"];\n        let realID = this.props.tokens[fakeID].realID;\n        depositDollars = Number(deposit)*this.props.tokens[fakeID].price;\n      }\n\n      let collateral = '';\n      let collToken = 'NO COLLATERAL';\n      let collDollars = 0;\n      if(this.state.collateralToken != ''){\n        collateral = this.state.userCollateral;\n        var fakeID = this.state.collateralToken;\n        if(this.props.tokens[fakeID] == null){\n          fakeID = fakeID.toLowerCase();\n        }\n        collToken = this.props.tokens[fakeID].symbol;\n        let realID = this.props.tokens[fakeID].realID;\n        collDollars = Number(collateral)*this.props.tokens[fakeID].price;\n      }\n\n      let loan = '';\n      let loanToken = 'NO LOAN';\n      let loanDollars = 0;\n      if(this.state.owedToken != ''){\n        loan = this.state.userOwed;\n        var fakeID = this.state.owedToken;\n        if(this.props.tokens[fakeID] == null){\n          fakeID = fakeID.toLowerCase();\n        }\n        loanToken = this.props.tokens[fakeID].symbol;\n        let realID = this.props.tokens[fakeID].realID;\n        loanDollars = Number(loan)*this.props.tokens[fakeID].price;\n      }\n\n      return (\n        <div className=\"container\">\n\n        <div className=\"box\">\n        <Container className=\"container\">\n          <Row className=\"rows\">\n            <Col sm={4}>\n              <div className=\"action-name\">Deposit:</div>\n            </Col>\n            <Col sm={8} >\n              <div className=\"deposit-value\">${depositDollars.toFixed(2)}</div>\n              <div className=\"deposit-token\">{deposit} {depositToken}</div>\n            </Col>\n          </Row>\n        </Container>\n\n        <br/>\n\n        </div>\n        <div className=\"box\">\n        <Container className=\"container\">\n\n          <h4 className=\"loan-heading\">Loan</h4>\n          <hr/>\n          <Row>\n            <Col sm={4}>\n              <div className=\"action-name\">Collateral:</div>\n            </Col>\n            <Col sm={8} >\n              <div className=\"deposit-value\">${collDollars.toFixed(2)}</div>\n              <div className=\"deposit-token\">{collateral} {collToken}</div>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm={4}>\n              <div className=\"action-name\">Owed:</div>\n            </Col>\n            <Col sm={8} >\n              <div className=\"deposit-value\">${loanDollars.toFixed(2)}</div>\n              <div className=\"deposit-token\">{loan} {loanToken}</div>\n            </Col>\n          </Row>\n\n        </Container>\n        </div>\n        </div>\n      );\n    }else{\n      return(<div>Loading</div>);\n    }\n\n  }\n}\nexport default Balance;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/ActionButtons.js",["106","107"],"import React, {Component} from 'react';\nimport {Container, Row, Col, Navbar, Button} from 'react-bootstrap';\nimport './ActionButtons.css';\nimport ActionView from './DepositView.js';\n\nclass ActionButtons extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonColors: [\"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\"],\n      actionType: \"Deposit\",\n    };\n  }\n\n  modifyStyle(buttonNo){\n    const newColors = [\"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\", \"#FF66C4\"];\n    newColors[buttonNo] = \"#302f75\";\n    const action = [\"Deposit\", \"Borrow\", \"Collateral\", \"Redeem\", \"Repay\"];\n    this.setState({buttonColors: newColors, actionType: action[buttonNo]});\n  }\n\n\n\n  render() {\n\n    return (\n      <div className=\"container-fluid\">\n      <Container>\n      <Row>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[0]}} type=\"button radio\" onClick={(e) => this.modifyStyle(0)}>Deposit</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[1]}} type=\"button radio\" onClick={(e) => this.modifyStyle(1)}>Borrow</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[2]}}  type=\"button radio\" onClick={(e) => this.modifyStyle(2)}>Collateral</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[3]}}  type=\"button radio\" onClick={(e) => this.modifyStyle(3)}>Redeem</button></Col>\n        <Col><button className=\"button\" style={{backgroundColor: this.state.buttonColors[4]}}  type=\"button radio\" onClick={(e) => this.modifyStyle(4)}>Repay</button></Col>\n      </Row>\n      <hr className=\"hrButtons\"/>\n      <Row> <ActionView handleLoadingTx={this.props.handleLoadingTx} type={this.state.actionType} tokens={this.props.tokens} prices={this.props.prices} web3={this.props.web3} liquidityPool={this.props.liquidityPool}/> </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n// <!-- <div className=\"tokens\"> {this.renderPrices()} </div> -->\nexport default ActionButtons;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/DepositView.js",["108","109","110","111","112","113","114","115","116","117","118"],"import React, {Component} from 'react';\nimport {Container, Row, Col, Form} from 'react-bootstrap';\nimport './DepositView.css';\nimport {deposit, redeem,borrow,depositCollateral,collateralFromDeposit, repay, getAccount, redeemCollateral} from './utils.js';\n/* global BigInt */\n\n\n\nclass ActionView extends Component {\n\n  constructor(props) {\n    // props: tokens list {fakeID, realID, symbol}\n    // props: type = [\"Deposit\", \"Borrow\", \"Collateral\", \"Redeem\", \"Repay\"]\n    // props: web3\n    // props: liquidityPool\n    // props: prices fakeID->price\n    super(props);\n    this.state = {\n      toBeAdded: '0x690C32B710EeC4ab0C12e5290E2a38137174d13a', //->fakeID (YFI)\n      amountToTransfer: 0,\n      amountToTransferUSD: 0,\n      toBeAddedColl: '0x690C32B710EeC4ab0C12e5290E2a38137174d13a',\n      amountToTransferColl: 0,\n      amountToTransferUSDColl: 0,\n    };\n  }\n\n  // this is for the second form from the collateral view\n  handleChangeSelectedToken_Coll = (e) => {\n    this.setState({ toBeAddedColl: e.target.value });\n  }\n  // this is for the second form from the collateral view\n  handleChangeAmount_Coll = (e) => {\n    this.setState({ amountToTransferColl: e.target.value });\n    if(this.state.toBeAdded != \"\"){\n      const price = this.props.prices[this.state.toBeAddedColl];\n      const valueUSD = price*e.target.value;\n      this.setState({amountToTransferUSDColl: valueUSD.toFixed(2)});\n    }\n  }\n\n  handleChangeSelectedToken = (e) => {\n    this.setState({ toBeAdded: e.target.value });\n  }\n\n  handleChangeAmount = (e) => {\n    this.setState({ amountToTransfer: e.target.value });\n    if(this.state.toBeAdded != \"\"){\n      const price = this.props.prices[this.state.toBeAdded];\n      const valueUSD = price*e.target.value;\n      this.setState({amountToTransferUSD: valueUSD.toFixed(2)});\n    }\n  }\n\n  async submitTransaction(){\n    const userAccount = await getAccount(this.props.web3);\n    const decimals = BigInt(\"1000000000000000\");\n    const amountToTransfer = BigInt(this.state.amountToTransfer*1000) * decimals;\n    this.props.handleLoadingTx(true);\n    console.log(\"Started Transaction\");\n    if(this.props.type == \"Deposit\"){\n      await deposit(userAccount, amountToTransfer, this.state.toBeAdded, this.props.web3, this.props.liquidityPool);\n    }else if(this.props.type == \"Redeem\"){\n      await redeem(userAccount, amountToTransfer, this.state.toBeAdded, this.props.web3, this.props.liquidityPool);\n    }else if(this.props.type == \"Borrow\"){\n      await borrow(userAccount, amountToTransfer, this.state.toBeAdded, this.props.web3, this.props.liquidityPool);\n    }else if(this.props.type == \"Collateral\"){\n      await depositCollateral(userAccount, amountToTransfer, this.state.toBeAdded, this.props.web3, this.props.liquidityPool);\n    }else if(this.props.type == \"Repay\"){\n      await repay(userAccount, amountToTransfer, this.state.toBeAdded, this.props.web3, this.props.liquidityPool);\n    }\n    console.log(\"Finished Transaction\");\n    this.props.handleLoadingTx(false);\n  }\n\n  async submitTransactionRedeemCollateral(){\n    const userAccount = await getAccount(this.props.web3);\n    const decimals = BigInt(\"1000000000000000\");\n    const amountToTransfer = BigInt(this.state.amountToTransfer*1000) * decimals;\n    this.props.handleLoadingTx(true);\n    console.log(\"Started Transaction\");\n    if(this.props.type == \"Redeem\"){\n      await redeemCollateral(userAccount, amountToTransfer, this.state.toBeAdded, this.props.web3, this.props.liquidityPool);\n    }\n    console.log(\"Finished Transaction\");\n    this.props.handleLoadingTx(false);\n  }\n\n  options(size){\n    var tokenOptions = [];\n    var i =0;\n    const len = this.props.tokens.length;\n    for(i=0; i < len; i++){\n      const fakeId = this.props.tokens[i][\"fakeID\"];\n      const symbol = this.props.tokens[i][\"symbol\"];\n      tokenOptions.push(<option value={fakeId}>{symbol}</option>);\n    }\n    // this is for the second form from the collateral view\n    return (\n    <Form.Group controlId=\"exampleForm.ControlSelect1\" className=\"topTokenInput\">\n      <Form.Control size={size} as=\"select\" className=\"tokenInput\" onChange={ this.handleChangeSelectedToken }>\n        {tokenOptions}\n      </Form.Control>\n    </Form.Group>\n  );\n  }\n\n\n\n  render() {\n    const optionsLg = this.options(\"lg\");\n    const optionsSm = this.options(\"sm\");\n    if(this.props.type == \"Redeem\"){\n      return (\n        <div className=\"container\">\n        <div>\n        <Container>\n          <Row>\n          <h4>Redeem Deposit</h4>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"sm\" type=\"email\" placeholder=\"e.g 450\" className=\"valueInput\" onChange={ this.handleChangeAmount }/>\n              </Form.Group>\n              {optionsSm}\n            </Form>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control readOnly size=\"sm\" type=\"email\" placeholder={this.state.amountToTransferUSD} className=\"valueInput\"/>\n              </Form.Group>\n\n            <Form.Group className=\"topTokenInput\">\n              <Form.Control size=\"sm\" className=\"tokenInput\" placeholder=\"USD\" disabled />\n            </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <button type=\"button\" className=\"collateral-submit\" onClick={this.submitTransaction.bind(this)}>Submit Transaction</button>\n          </Row>\n\n        </Container>\n        </div>\n\n        <br/>\n\n        <div>\n        <Container>\n          <Row>\n          <h4>Redeem Collateral</h4>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"sm\" type=\"email\" placeholder=\"e.g 450\" className=\"valueInput\" onChange={ this.handleChangeAmount }/>\n              </Form.Group>\n              {optionsSm}\n            </Form>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control readOnly size=\"sm\" type=\"email\" placeholder={this.state.amountToTransferUSD} className=\"valueInput\"/>\n              </Form.Group>\n\n            <Form.Group className=\"topTokenInput\">\n              <Form.Control size=\"sm\" className=\"tokenInput\" placeholder=\"USD\" disabled />\n            </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <button type=\"button\" className=\"collateral-submit\" onClick={this.submitTransactionRedeemCollateral.bind(this)}>Submit Transaction</button>\n          </Row>\n\n        </Container>\n        </div>\n\n        </div>\n      );\n    }else{\n      return (\n        <div className=\"container\">\n\n        <div>\n        <Container>\n          <Row>\n          <div><br/></div>\n          </Row>\n          <Row>\n          <h3>{this.props.type}</h3>\n          </Row>\n          <br/>\n\n          <Row>\n            <Form className=\"inputField\">\n              <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n                <Form.Control size=\"lg\" type=\"email\" placeholder=\"e.g 450\" className=\"valueInput\" onChange={ this.handleChangeAmount }/>\n              </Form.Group>\n              {optionsLg}\n            </Form>\n          </Row>\n\n          <Row>\n            <Form className=\"inputField\">\n            <Form.Group controlId=\"formBasicEmail\" className=\"topValueInput\">\n              <Form.Control size=\"lg\" readOnly type=\"email\" placeholder={this.state.amountToTransferUSD.toString()} className=\"valueInput\"/>\n            </Form.Group>\n\n            <Form.Group className=\"topTokenInput\">\n              <Form.Control size=\"lg\" className=\"tokenInput\" placeholder=\"USD\" disabled />\n            </Form.Group>\n            </Form>\n          </Row>\n\n          <Row>\n            <button type=\"button\" className=\"submitButton\" onClick={this.submitTransaction.bind(this)}>Submit Transaction</button>\n\n          </Row>\n\n        </Container>\n        </div>\n\n        </div>\n      );\n    }\n\n  }\n}\nexport default ActionView;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/utils.js",["119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135"],"/Users/ioanaroceanu/Documents/web-lending-app/src/priceUpdate.js",["136","137","138","139","140","141","142","143"],"import Web3 from 'web3';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\n\n\n// returns realID: [symbol, prices]\nexport async function getTokenAPIPrices(realIdSymbol){\n  const url = \"https://uniswapmyapi.herokuapp.com/tokenPrices\";\n  let response = await fetch(url);\n  let data = await response.json();\n  // create price dictionary and array of token ids\n  let object = data.prices;\n  let tmprPrices = {};\n  // for every token build dictionary entry id:[symbol, price]\n  // and array of token's ids\n  var i;\n  for(i = 0; i < 226; i++){\n    let id = object[i][\"id\"];\n    if(realIdSymbol[id] == null){\n      continue;\n    }\n    let price = object[i][\"prices\"];\n    let symbol = realIdSymbol[id].symbol;\n    tmprPrices[id] = [symbol, price];\n  }\n  return tmprPrices;\n\n}\n","/Users/ioanaroceanu/Documents/web-lending-app/src/LiquidityView.js",["144","145","146","147","148","149","150","151","152","153","154","155"],"import React, {Component} from 'react';\nimport './Balance.css';\nimport Web3 from 'web3';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport logo from './logo.png';\nimport {IRVAR_ABI, IRVAR_ADD,LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\nimport {loadWeb3, getAccount, getUserDeposit, getUserLoanDetails, getTokenAPIPrice} from './utils.js';\nimport './LiquidityView.css';\n/* global BigInt */\n\n\nclass LiquidityView extends Component {\n\n  constructor(props) {\n    // props fakeID token\n    // props symbol\n    super(props);\n    this.state = {\n      isLoaded: false,\n      liquidityPool: null,\n      web3: null,\n      reloadedBalance: false,\n      totalBorrowed: 0,\n      totalDeposited: 0,\n      utilisation: 0,\n      totalCollateral: 0,\n      reserves: 0,\n    };\n  }\n\n  componentWillMount(){\n    this.loadBlockchainData();\n  }\n\n\n  async loadBlockchainData(){\n    const web3 = await loadWeb3();\n    const account = await getAccount(web3);\n    //initialise instance of LP contract\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD);\n    this.setState({liquidityPool: lpinstance,web3: web3});\n    await this.renderLiquidity(web3, lpinstance);\n  }\n\n  async renderLiquidity(web3, lpinstance){\n    const tokenAdd = await web3.utils.toChecksumAddress(this.props.fakeID);\n    // reserves\n    const tokenInstance = new web3.eth.Contract(ERC20_ABI, tokenAdd);\n    var reserves = await tokenInstance.methods.balanceOf(LiquidityPool_ADD).call();\n    reserves = Number(BigInt(reserves)/BigInt(10n**15n))/1000;\n    // total deposited\n    const tokensdata = await lpinstance.methods.tknsData(tokenAdd).call();\n    const ivar = await new web3.eth.Contract(IRVAR_ABI, IRVAR_ADD);\n    const irvardata = await ivar.methods.tokens(tokenAdd).call();\n    console.log(irvardata.optimal_utilisation);\n    const totalDeposited = Number(BigInt(tokensdata.totalDeposited)/BigInt(10n**15n))/1000;\n    const totalBorrowed = Number(BigInt(tokensdata.totalBorrowed)/BigInt(10n**15n))/1000;\n    const totalCollateral = Number(BigInt(tokensdata.totalCollateral)/BigInt(10n**15n))/1000;\n    this.setState({reserves: reserves, totalDeposited: totalDeposited, totalBorrowed: totalBorrowed, totalCollateral: totalCollateral});\n    console.log(\"Finished loading\");\n  }\n\n  render() {\n    var wDep = 0;\n    var wRes = 0;\n    var wColl = 0;\n    var wBorr = 0;\n    if(this.state.totalDeposited > this.state.reserves && this.state.totalDeposited != 0){\n      wDep = 100;\n      wRes = (this.state.reserves*100)/this.state.totalDeposited;\n      wColl = (this.state.totalCollateral*100)/this.state.totalDeposited;\n      wBorr = (this.state.totalBorrowed*100)/this.state.totalDeposited;\n    }else if(this.state.reserves != 0){\n      wRes = 100;\n      wDep = (this.state.totalDeposited*100)/this.state.reserves;\n      wColl = (this.state.totalCollateral*100)/this.state.reserves;\n      wBorr = (this.state.totalBorrowed*100)/this.state.reserves;\n    }\n    wRes = Math.round(wRes).toString() + \"%\";\n    wDep = Math.round(wDep).toString() + \"%\";\n    wColl =Math.round(wColl).toString() + \"%\";\n    wBorr = Math.round(wBorr).toString() + \"%\";\n    console.log(wDep+','+wRes+','+wColl);\n    const styleRes = {\n      width: wRes\n    };\n    const styleDep = {\n      width: wDep\n    };\n    const styleColl = {\n      width: wColl\n    };\n    const styleBorr = {\n      width: wBorr\n    };\n\n\n      return (\n        <div>\n        <Container className=\"token-details\">\n          <Row className=\"rows\">\n          <Col lg={4} className=\"column\">\n            <div className=\"total-deposited\">Total Depoisted: {this.state.totalDeposited}  {this.props.symbol}</div>\n          </Col>\n          <Col lg={7} className=\"columnBar\">\n            <div className=\"bar\" style={styleDep}></div>\n          </Col>\n          </Row>\n        </Container>\n\n        <Container className=\"token-details\">\n          <Row className=\"rows\">\n          <Col lg={4} className=\"column\">\n          <div className=\"total-deposited\">Total Borrowed: {this.state.totalBorrowed}  {this.props.symbol}</div>\n          </Col>\n          <Col lg={7} className=\"columnBar\">\n            <div className=\"bar\" style={styleBorr}></div>\n          </Col>\n          </Row>\n        </Container>\n\n        <Container className=\"token-details\">\n          <Row className=\"rows\">\n          <Col lg={4} className=\"column\">\n          <div className=\"total-deposited\">Total Collateral: {this.state.totalCollateral}  {this.props.symbol}</div>\n          </Col>\n          <Col lg={7} className=\"columnBar\">\n            <div className=\"bar\" style={styleColl}></div>\n          </Col>\n          </Row>\n        </Container>\n\n        <Container className=\"token-details last\">\n          <Row className=\"rows\">\n          <Col lg={4} className=\"column\">\n          <div className=\"total-deposited\">Total Reserves: {this.state.reserves}  {this.props.symbol}</div>\n          </Col>\n          <Col lg={7} className=\"columnBar\">\n            <div className=\"bar\" style={styleRes}></div>\n          </Col>\n          </Row>\n        </Container>\n        </div>\n    )\n  }\n}\nexport default LiquidityView;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/Liquidation.js",["156","157","158","159","160","161","162","163","164","165","166","167"],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":6,"column":38,"nodeType":"174","messageId":"175","endLine":6,"endColumn":44},{"ruleId":"172","severity":1,"message":"176","line":11,"column":64,"nodeType":"174","messageId":"175","endLine":11,"endColumn":75},{"ruleId":"172","severity":1,"message":"177","line":11,"column":120,"nodeType":"174","messageId":"175","endLine":11,"endColumn":135},{"ruleId":"172","severity":1,"message":"178","line":11,"column":137,"nodeType":"174","messageId":"175","endLine":11,"endColumn":166},{"ruleId":"172","severity":1,"message":"179","line":11,"column":168,"nodeType":"174","messageId":"175","endLine":11,"endColumn":193},{"ruleId":"172","severity":1,"message":"180","line":12,"column":75,"nodeType":"174","messageId":"175","endLine":12,"endColumn":84},{"ruleId":"172","severity":1,"message":"181","line":12,"column":86,"nodeType":"174","messageId":"175","endLine":12,"endColumn":95},{"ruleId":"172","severity":1,"message":"182","line":12,"column":97,"nodeType":"174","messageId":"175","endLine":12,"endColumn":111},{"ruleId":"172","severity":1,"message":"183","line":51,"column":11,"nodeType":"174","messageId":"175","endLine":51,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":128,"column":5,"nodeType":"186","messageId":"187","endLine":128,"endColumn":25},{"ruleId":"188","severity":1,"message":"189","line":204,"column":11,"nodeType":"190","endLine":204,"endColumn":48},{"ruleId":"172","severity":1,"message":"191","line":3,"column":9,"nodeType":"174","messageId":"175","endLine":3,"endColumn":20},{"ruleId":"172","severity":1,"message":"192","line":4,"column":9,"nodeType":"174","messageId":"175","endLine":4,"endColumn":18},{"ruleId":"172","severity":1,"message":"193","line":4,"column":30,"nodeType":"174","messageId":"175","endLine":4,"endColumn":36},{"ruleId":"172","severity":1,"message":"173","line":4,"column":38,"nodeType":"174","messageId":"175","endLine":4,"endColumn":44},{"ruleId":"172","severity":1,"message":"194","line":4,"column":46,"nodeType":"174","messageId":"175","endLine":4,"endColumn":50},{"ruleId":"172","severity":1,"message":"180","line":5,"column":75,"nodeType":"174","messageId":"175","endLine":5,"endColumn":84},{"ruleId":"172","severity":1,"message":"181","line":5,"column":86,"nodeType":"174","messageId":"175","endLine":5,"endColumn":95},{"ruleId":"172","severity":1,"message":"182","line":5,"column":97,"nodeType":"174","messageId":"175","endLine":5,"endColumn":111},{"ruleId":"172","severity":1,"message":"195","line":7,"column":9,"nodeType":"174","messageId":"175","endLine":7,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":56,"column":35,"nodeType":"198","messageId":"199","endLine":56,"endColumn":37},{"ruleId":"172","severity":1,"message":"183","line":66,"column":11,"nodeType":"174","messageId":"175","endLine":66,"endColumn":18},{"ruleId":"196","severity":1,"message":"197","line":144,"column":85,"nodeType":"198","messageId":"199","endLine":144,"endColumn":87},{"ruleId":"196","severity":1,"message":"197","line":147,"column":47,"nodeType":"198","messageId":"199","endLine":147,"endColumn":49},{"ruleId":"196","severity":1,"message":"197","line":155,"column":41,"nodeType":"198","messageId":"199","endLine":155,"endColumn":43},{"ruleId":"172","severity":1,"message":"200","line":188,"column":11,"nodeType":"174","messageId":"175","endLine":188,"endColumn":27},{"ruleId":"172","severity":1,"message":"201","line":3,"column":8,"nodeType":"174","messageId":"175","endLine":3,"endColumn":19},{"ruleId":"172","severity":1,"message":"202","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":12},{"ruleId":"172","severity":1,"message":"193","line":5,"column":30,"nodeType":"174","messageId":"175","endLine":5,"endColumn":36},{"ruleId":"172","severity":1,"message":"203","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":12},{"ruleId":"172","severity":1,"message":"204","line":7,"column":68,"nodeType":"174","messageId":"175","endLine":7,"endColumn":80},{"ruleId":"172","severity":1,"message":"205","line":7,"column":82,"nodeType":"174","messageId":"175","endLine":7,"endColumn":94},{"ruleId":"172","severity":1,"message":"180","line":7,"column":96,"nodeType":"174","messageId":"175","endLine":7,"endColumn":105},{"ruleId":"172","severity":1,"message":"181","line":7,"column":107,"nodeType":"174","messageId":"175","endLine":7,"endColumn":116},{"ruleId":"172","severity":1,"message":"182","line":7,"column":118,"nodeType":"174","messageId":"175","endLine":7,"endColumn":132},{"ruleId":"172","severity":1,"message":"206","line":8,"column":67,"nodeType":"174","messageId":"175","endLine":8,"endColumn":83},{"ruleId":"196","severity":1,"message":"197","line":37,"column":94,"nodeType":"198","messageId":"199","endLine":37,"endColumn":96},{"ruleId":"172","severity":1,"message":"207","line":57,"column":11,"nodeType":"174","messageId":"175","endLine":57,"endColumn":20},{"ruleId":"196","severity":1,"message":"208","line":76,"column":36,"nodeType":"198","messageId":"199","endLine":76,"endColumn":38},{"ruleId":"172","severity":1,"message":"209","line":83,"column":13,"nodeType":"174","messageId":"175","endLine":83,"endColumn":19},{"ruleId":"196","severity":1,"message":"208","line":90,"column":37,"nodeType":"198","messageId":"199","endLine":90,"endColumn":39},{"ruleId":"210","severity":1,"message":"211","line":92,"column":13,"nodeType":"174","messageId":"212","endLine":92,"endColumn":19},{"ruleId":"172","severity":1,"message":"209","line":97,"column":13,"nodeType":"174","messageId":"175","endLine":97,"endColumn":19},{"ruleId":"196","severity":1,"message":"208","line":104,"column":31,"nodeType":"198","messageId":"199","endLine":104,"endColumn":33},{"ruleId":"210","severity":1,"message":"211","line":106,"column":13,"nodeType":"174","messageId":"212","endLine":106,"endColumn":19},{"ruleId":"172","severity":1,"message":"209","line":111,"column":13,"nodeType":"174","messageId":"175","endLine":111,"endColumn":19},{"ruleId":"172","severity":1,"message":"193","line":2,"column":30,"nodeType":"174","messageId":"175","endLine":2,"endColumn":36},{"ruleId":"172","severity":1,"message":"173","line":2,"column":38,"nodeType":"174","messageId":"175","endLine":2,"endColumn":44},{"ruleId":"172","severity":1,"message":"213","line":2,"column":25,"nodeType":"174","messageId":"175","endLine":2,"endColumn":28},{"ruleId":"172","severity":1,"message":"214","line":4,"column":50,"nodeType":"174","messageId":"175","endLine":4,"endColumn":71},{"ruleId":"196","severity":1,"message":"208","line":35,"column":29,"nodeType":"198","messageId":"199","endLine":35,"endColumn":31},{"ruleId":"196","severity":1,"message":"208","line":48,"column":29,"nodeType":"198","messageId":"199","endLine":48,"endColumn":31},{"ruleId":"196","severity":1,"message":"197","line":61,"column":24,"nodeType":"198","messageId":"199","endLine":61,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":63,"column":30,"nodeType":"198","messageId":"199","endLine":63,"endColumn":32},{"ruleId":"196","severity":1,"message":"197","line":65,"column":30,"nodeType":"198","messageId":"199","endLine":65,"endColumn":32},{"ruleId":"196","severity":1,"message":"197","line":67,"column":30,"nodeType":"198","messageId":"199","endLine":67,"endColumn":32},{"ruleId":"196","severity":1,"message":"197","line":69,"column":30,"nodeType":"198","messageId":"199","endLine":69,"endColumn":32},{"ruleId":"196","severity":1,"message":"197","line":82,"column":24,"nodeType":"198","messageId":"199","endLine":82,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":113,"column":24,"nodeType":"198","messageId":"199","endLine":113,"endColumn":26},{"ruleId":"172","severity":1,"message":"215","line":3,"column":31,"nodeType":"174","messageId":"175","endLine":3,"endColumn":48},{"ruleId":"172","severity":1,"message":"216","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":10},{"ruleId":"172","severity":1,"message":"217","line":87,"column":9,"nodeType":"174","messageId":"175","endLine":87,"endColumn":17},{"ruleId":"172","severity":1,"message":"218","line":97,"column":7,"nodeType":"174","messageId":"175","endLine":97,"endColumn":15},{"ruleId":"172","severity":1,"message":"219","line":132,"column":9,"nodeType":"174","messageId":"175","endLine":132,"endColumn":15},{"ruleId":"172","severity":1,"message":"220","line":170,"column":9,"nodeType":"174","messageId":"175","endLine":170,"endColumn":19},{"ruleId":"172","severity":1,"message":"221","line":199,"column":9,"nodeType":"174","messageId":"175","endLine":199,"endColumn":16},{"ruleId":"210","severity":1,"message":"222","line":231,"column":7,"nodeType":"174","messageId":"212","endLine":231,"endColumn":10},{"ruleId":"210","severity":1,"message":"222","line":266,"column":7,"nodeType":"174","messageId":"212","endLine":266,"endColumn":10},{"ruleId":"210","severity":1,"message":"222","line":294,"column":7,"nodeType":"174","messageId":"212","endLine":294,"endColumn":10},{"ruleId":"210","severity":1,"message":"222","line":326,"column":7,"nodeType":"174","messageId":"212","endLine":326,"endColumn":10},{"ruleId":"210","severity":1,"message":"222","line":357,"column":7,"nodeType":"174","messageId":"212","endLine":357,"endColumn":10},{"ruleId":"172","severity":1,"message":"223","line":369,"column":7,"nodeType":"174","messageId":"175","endLine":369,"endColumn":17},{"ruleId":"210","severity":1,"message":"222","line":386,"column":7,"nodeType":"174","messageId":"212","endLine":386,"endColumn":10},{"ruleId":"210","severity":1,"message":"222","line":414,"column":7,"nodeType":"174","messageId":"212","endLine":414,"endColumn":10},{"ruleId":"210","severity":1,"message":"222","line":444,"column":7,"nodeType":"174","messageId":"212","endLine":444,"endColumn":10},{"ruleId":"196","severity":1,"message":"197","line":497,"column":24,"nodeType":"198","messageId":"199","endLine":497,"endColumn":26},{"ruleId":"172","severity":1,"message":"202","line":1,"column":8,"nodeType":"174","messageId":"175","endLine":1,"endColumn":12},{"ruleId":"172","severity":1,"message":"215","line":2,"column":9,"nodeType":"174","messageId":"175","endLine":2,"endColumn":26},{"ruleId":"172","severity":1,"message":"224","line":2,"column":28,"nodeType":"174","messageId":"175","endLine":2,"endColumn":45},{"ruleId":"172","severity":1,"message":"204","line":2,"column":47,"nodeType":"174","messageId":"175","endLine":2,"endColumn":59},{"ruleId":"172","severity":1,"message":"205","line":2,"column":61,"nodeType":"174","messageId":"175","endLine":2,"endColumn":73},{"ruleId":"172","severity":1,"message":"180","line":2,"column":75,"nodeType":"174","messageId":"175","endLine":2,"endColumn":84},{"ruleId":"172","severity":1,"message":"181","line":2,"column":86,"nodeType":"174","messageId":"175","endLine":2,"endColumn":95},{"ruleId":"172","severity":1,"message":"182","line":2,"column":97,"nodeType":"174","messageId":"175","endLine":2,"endColumn":111},{"ruleId":"172","severity":1,"message":"202","line":3,"column":8,"nodeType":"174","messageId":"175","endLine":3,"endColumn":12},{"ruleId":"172","severity":1,"message":"203","line":5,"column":8,"nodeType":"174","messageId":"175","endLine":5,"endColumn":12},{"ruleId":"172","severity":1,"message":"204","line":6,"column":68,"nodeType":"174","messageId":"175","endLine":6,"endColumn":80},{"ruleId":"172","severity":1,"message":"205","line":6,"column":82,"nodeType":"174","messageId":"175","endLine":6,"endColumn":94},{"ruleId":"172","severity":1,"message":"181","line":6,"column":107,"nodeType":"174","messageId":"175","endLine":6,"endColumn":116},{"ruleId":"172","severity":1,"message":"182","line":6,"column":118,"nodeType":"174","messageId":"175","endLine":6,"endColumn":132},{"ruleId":"172","severity":1,"message":"225","line":7,"column":31,"nodeType":"174","messageId":"175","endLine":7,"endColumn":45},{"ruleId":"172","severity":1,"message":"226","line":7,"column":47,"nodeType":"174","messageId":"175","endLine":7,"endColumn":65},{"ruleId":"172","severity":1,"message":"206","line":7,"column":67,"nodeType":"174","messageId":"175","endLine":7,"endColumn":83},{"ruleId":"172","severity":1,"message":"227","line":38,"column":11,"nodeType":"174","messageId":"175","endLine":38,"endColumn":18},{"ruleId":"196","severity":1,"message":"208","line":68,"column":85,"nodeType":"198","messageId":"199","endLine":68,"endColumn":87},{"ruleId":"196","severity":1,"message":"208","line":73,"column":34,"nodeType":"198","messageId":"199","endLine":73,"endColumn":36},{"ruleId":"172","severity":1,"message":"202","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":12},{"ruleId":"172","severity":1,"message":"193","line":3,"column":30,"nodeType":"174","messageId":"175","endLine":3,"endColumn":36},{"ruleId":"172","severity":1,"message":"173","line":3,"column":38,"nodeType":"174","messageId":"175","endLine":3,"endColumn":44},{"ruleId":"172","severity":1,"message":"203","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":12},{"ruleId":"172","severity":1,"message":"228","line":5,"column":9,"nodeType":"174","messageId":"175","endLine":5,"endColumn":18},{"ruleId":"172","severity":1,"message":"229","line":5,"column":20,"nodeType":"174","messageId":"175","endLine":5,"endColumn":29},{"ruleId":"172","severity":1,"message":"180","line":5,"column":96,"nodeType":"174","messageId":"175","endLine":5,"endColumn":105},{"ruleId":"172","severity":1,"message":"181","line":5,"column":107,"nodeType":"174","messageId":"175","endLine":5,"endColumn":116},{"ruleId":"172","severity":1,"message":"182","line":5,"column":118,"nodeType":"174","messageId":"175","endLine":5,"endColumn":132},{"ruleId":"172","severity":1,"message":"225","line":6,"column":31,"nodeType":"174","messageId":"175","endLine":6,"endColumn":45},{"ruleId":"172","severity":1,"message":"226","line":6,"column":47,"nodeType":"174","messageId":"175","endLine":6,"endColumn":65},{"ruleId":"172","severity":1,"message":"206","line":6,"column":67,"nodeType":"174","messageId":"175","endLine":6,"endColumn":83},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'deployToken' is defined but never used.","'addLoadedTokens' is defined but never used.","'updateExchangePricesFromOwner' is defined but never used.","'updateLiquidityPoolPrices' is defined but never used.","'ERC20_ABI' is defined but never used.","'Token_ABI' is defined but never used.","'Token_BYTECODE' is defined but never used.","'network' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Transaction' is defined but never used.","'Container' is defined but never used.","'Navbar' is defined but never used.","'Form' is defined but never used.","'getTokenAPIPrices' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'updatedTokenList' is assigned a value but never used.","'PriceUpdate' is defined but never used.","'Web3' is defined but never used.","'logo' is defined but never used.","'Exchange_ADD' is defined but never used.","'Exchange_ABI' is defined but never used.","'getTokenAPIPrice' is defined but never used.","'tokenData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'realID' is assigned a value but never used.","no-redeclare","'fakeID' is already defined.","redeclared","'Col' is defined but never used.","'collateralFromDeposit' is defined but never used.","'LiquidityPool_ABI' is defined but never used.","'fs' is defined but never used.","'nonceHex' is assigned a value but never used.","'instance' is assigned a value but never used.","'tknAdd' is assigned a value but never used.","'tknAddress' is assigned a value but never used.","'receipt' is assigned a value but never used.","'str' is already defined.","'tknDetails' is assigned a value but never used.","'LiquidityPool_ADD' is defined but never used.","'getUserDeposit' is defined but never used.","'getUserLoanDetails' is defined but never used.","'account' is assigned a value but never used.","'IRVAR_ABI' is defined but never used.","'IRVAR_ADD' is defined but never used.","no-global-assign","no-unsafe-negation"]