[{"/Users/ioanaroceanu/Documents/web-lending-app/src/index.js":"1","/Users/ioanaroceanu/Documents/web-lending-app/src/App.js":"2","/Users/ioanaroceanu/Documents/web-lending-app/src/reportWebVitals.js":"3","/Users/ioanaroceanu/Documents/web-lending-app/src/price_update.js":"4","/Users/ioanaroceanu/Documents/web-lending-app/src/abis/abi.js":"5","/Users/ioanaroceanu/Documents/web-lending-app/src/Balance.js":"6","/Users/ioanaroceanu/Documents/web-lending-app/src/ActionButtons.js":"7"},{"size":541,"mtime":1611497412043,"results":"8","hashOfConfig":"9"},{"size":3416,"mtime":1611693980355,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610542469841,"results":"11","hashOfConfig":"9"},{"size":9119,"mtime":1611478626242,"results":"12","hashOfConfig":"9"},{"size":35030,"mtime":1611303987504,"results":"13","hashOfConfig":"9"},{"size":1900,"mtime":1611509775534,"results":"14","hashOfConfig":"9"},{"size":1646,"mtime":1611694250394,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9le6z9",{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ioanaroceanu/Documents/web-lending-app/src/index.js",[],["33","34"],"/Users/ioanaroceanu/Documents/web-lending-app/src/App.js",["35","36","37","38","39","40"],"/Users/ioanaroceanu/Documents/web-lending-app/src/reportWebVitals.js",[],"/Users/ioanaroceanu/Documents/web-lending-app/src/price_update.js",["41","42","43","44","45","46","47"],"import React, {Component} from 'react';\nimport Web3 from 'web3';\nimport {Transaction} from 'ethereumjs-tx';\nimport {LiquidityPool_ABI, LiquidityPool_ADD, Exchange_ADD, Exchange_ABI, ERC20_ABI, Token_ABI, Token_BYTECODE } from './abis/abi'\n\nclass PriceUpdate extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      tokensLoaded: false,\n      pricesDict: {}, // this is a dictionary tokenName -> price\n      tokenIDs: [],\n      seconds: 0,\n      liquidityPool: null,\n      exchange: null,\n      web3: null\n    };\n  }\n\n  ///// UTILS\n\n  // deploy the code for a token and return its address\n  async depolyToken(name, symbol, web3){\n    //create contract and depoly\n    var contract = new web3.eth.Contract(Token_ABI);\n    /*const contractData = Contract.new.getData('Weth', 'Weth',{\n        data: '0x' + Token_BYTECODE\n    });*/\n    const account = await web3.utils.toChecksumAddress('0x614114ec0a5a6def6172d8cb210facb63d459c04');\n    const gasPrice = await web3.utils.toWei('100', 'gwei');\n    const gasPriceHex = await web3.utils.toHex(gasPrice);\n    const nonce = await web3.eth.getTransactionCount(account);\n    const nonceHex = await web3.utils.toHex(nonce);\n\n    console.log(account);\n    console.log(web3.utils.isAddress(account));\n    contract.options.data = Token_BYTECODE;\n\n    var TokenTx = contract.deploy({\n        arguments: [name, symbol]\n    });\n    await window.ethereum.enable();\n    var tokenAddress;\n    console.log(\"Deploy token\");\n    var instance = await TokenTx.send({\n        from: account,\n        gasLimit: 1500000,\n        gasPrice: gasPriceHex,\n        value: 0\n    }).then(function(newContractInstance){\n        tokenAddress = newContractInstance.options.address; // instance with the new contract address\n    });\n\n    return tokenAddress;\n  }\n\n  // give token from owner to another account\n  async giveTokenTo(account, owner, tokenInstance, amount){\n    //send tokens to adresses\n    let value = this.state.web3.utils.toHex(amount);\n    await tokenInstance.methods.transfer(account, value).send({from: owner}).on('transactionHash', function(hash){\n        //console.log(hash);\n      });\n    var balance;\n    await tokenInstance.methods.balanceOf(account).call().then(res =>{ balance = res; });\n  }\n\n  // give permission to contract to retreive tokens\n  async givePermissionToContract(account, privateKey, contractAddress, amount, tokenInstance, tokenAddress){\n    var nonce = await this.state.web3.eth.getTransactionCount(account);\n    const rawTx = {\n      nonce: nonce,\n      from: account,\n      to: tokenAddress,\n      gasLimit: this.state.web3.utils.toHex(200000),\n      data: tokenInstance.methods.approve(contractAddress, amount).encodeABI()\n    };\n    // private key of the second account\n    var privateKey = new Buffer(privateKey, 'hex');\n    var tx = new Transaction(rawTx);\n    tx.sign(privateKey);\n    var serializedTx = tx.serialize();\n    this.state.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', console.log);\n  }\n\n  componentWillMount(){\n    this.leadBlockchainData();\n  }\n\n  async updatePricesFromOwner(token, web3, account){\n    \n    const privateKey = new Buffer('8ba9b5140d9b73afbdbb177247abe308242eaa55a955a52f7ebf2c2ca8aae99a', 'hex');\n    var nonce = await web3.eth.getTransactionCount(account);\n    const gasLimit = await web3.utils.toHex(2000000);\n    const data = await this.state.exchange.methods.updatePrice(token, 800).encodeABI();\n    const gasPrice = await web3.utils.toWei('100', 'gwei');\n    const gasPriceHex = await web3.utils.toHex(gasPrice);\n    const rawTx = {\n      nonce: nonce,\n      from: account,\n      to: Exchange_ADD,\n      gasLimit: gasLimit,\n      gasPrice: gasPriceHex,\n      chainId: 3,\n      data: data\n    };\n    // private key of the second account\n    var tx = new Transaction(rawTx, {'chain':'ropsten'});\n    tx.sign(privateKey);\n    var serializedTx = tx.serialize();\n    console.log(\"Send signed transaction on price update\");\n    const receipt = await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));\n    console.log(receipt);\n  }\n\n  async updateContractsPrices(token, web3, account){\n\n    const tokenAddress = await web3.utils.toChecksumAddress(token);\n    // update exchange prices\n    await window.ethereum.enable();\n    await this.state.exchange.methods.updatePrice(token, 800).send({from: account});\n    // update liquidity pool prices\n    await window.ethereum.enable();\n    await this.state.liquidityPool.methods.updateTokenPrice(token).send({from: account});\n    const priceExchange = await this.state.exchange.methods.getPrice(tokenAddress).call();\n    console.log(\"this is the current price in the exchange\");\n    console.log(priceExchange);\n  }\n\n  async leadBlockchainData(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    //this.setState({web3: web3});\n    const network = await web3.eth.net.getNetworkType();\n    console.log(\"network:\",network);\n    const lpinstance = new web3.eth.Contract(LiquidityPool_ABI, LiquidityPool_ADD);\n    const exinstance = new web3.eth.Contract(Exchange_ABI, Exchange_ADD);\n    this.setState({liquidityPool: lpinstance, exchange: exinstance});\n\n    // create the token (deploy and create pool in LP and exchange)\n    /*var address = await this.createToken(web3,'Weth',80, 70, 0, 7, 200, 1, 490);*/\n    const address = await web3.utils.toChecksumAddress('0xc91acB1Ad59E1d839bF3556A8Ec8d62129E24319');\n    console.log(\"This is the token's address\");\n    console.log(address);\n    const account = await web3.utils.toChecksumAddress('0x614114ec0a5a6def6172d8cb210facb63d459c04');\n    await this.updatePricesFromOwner(address, web3, account);\n\n    console.log(\"NOw we are asking for the price\");\n    await window.ethereum.enable();\n    const priceExchange = await this.state.exchange.methods.getPrice(address).call();\n    console.log(\"this is the current price in the exchange\");\n    console.log(priceExchange);\n    //await this.updateContractsPrices(address, web3, account);\n  }\n\n\n\n  async createToken(web3, _symbol, _optimal_utilisation, _collateral_factor, _base_rate, _slope1, _slope2, _spread, _price){\n    var address = await this.depolyToken(_symbol,_symbol,web3);\n    // create pool in exchange\n    const account = await web3.utils.toChecksumAddress('0x614114ec0a5a6def6172d8cb210facb63d459c04');\n    await window.ethereum.enable();\n    console.log(\"Create the pool in Exchange\");\n    await this.state.exchange.methods.createPool(address,_price,_symbol).send({from: account});\n    // create token in LiquidityPool\n    await window.ethereum.enable();\n    console.log(\"Create the pool in LP\");\n    await this.state.liquidityPool.methods.createToken( _symbol,address,_optimal_utilisation,_collateral_factor, _base_rate,_slope1,_slope2,_spread,_price).send({from: account});\n    return address;\n  }\n\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ seconds: this.state.seconds + 10 }), 300000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // make an API request only if 5 minutes passed - 30 seconds\n    if(prevState.seconds != this.state.seconds){\n      const url = \"https://uniswapmyapi.herokuapp.com/tokenPrices\";\n      fetch(url)\n      .then(res => res.json())\n      .then((data) => {\n\n        if(!this.state.tokensLoaded){ // create price dictionary and array of token ids\n          let object = data.prices;\n          let tmprIDs = [];\n          let tmprPrices = {};\n          // for every token build dictionary entry id:[symbol, price]\n          // and array of token's ids\n          var i;\n          for(i = 0; i < 300; i++){\n            let id = object[i][\"id\"];\n            tmprIDs.push(id);\n            let symbol = object[i][\"symbol\"];\n            let price = object[i][\"prices\"];\n            tmprPrices[id] = [symbol, price];\n          }\n          this.setState({tokenIDs: tmprIDs, pricesDict: tmprPrices, tokensLoaded: true });\n\n        }else { // update prices from dictionary\n          let object = data.prices;\n          let copyDict = {...this.state.pricesDict};\n          var i;\n          for(i = 0; i < 300; i++){\n            let tokenId = this.state.tokenIDs[i];\n            // !!!! assuming the API data is in the same order as the tokenIds array\n            copyDict[tokenId][1] = object[i][\"prices\"];\n          }\n          this.setState({pricesDict: copyDict});\n        }\n        this.setState({isLoaded: true});\n      })\n      .catch(console.log);\n    }\n\n  }\n\n\n\n  render() {\n    const updatedTokenList = this.state.tokenIDs.map((token)=>{\n      return(\n              <li key={token.toString()}>\n                  {this.state.pricesDict[token][0]} : {this.state.pricesDict[token][1]}\n              </li>\n          );\n    });\n\n    var isLoaded = this.state.isLoaded;\n\n    if (!isLoaded){\n      return <div>Loading .... {this.state.seconds}</div>;\n    }\n    else{\n      return (\n        <div className=\"container\">\n          <ul>{updatedTokenList}</ul>\n        </div>\n      );\n    }\n\n\n  }\n\n\n\n}\n\nexport default PriceUpdate;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/abis/abi.js",[],"/Users/ioanaroceanu/Documents/web-lending-app/src/Balance.js",["48","49","50","51"],"import React, {Component} from 'react';\nimport './Balance.css';\nimport PriceUpdate from './price_update';\nimport Web3 from 'web3';\nimport {Container, Row, Col, Navbar} from 'react-bootstrap';\nimport logo from './logo.png';\n\n\nclass Balance extends Component {\n\n  /*componentWillMount(){\n    this.leadBlockchainData();\n  }\n\n  async leadBlockchainData(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const network = await web3.eth.net.getNetworkType();\n    console.log(\"network:\",network);\n  }\n\n\n  renderPrices() {\n    const listTokens = [\"ABC\", \"DEF\", \"GHI\"];\n    return (\n      <PriceUpdate\n        tokens={listTokens}\n      />\n    );\n  }*/\n\n  render() {\n    return (\n      <div className=\"container\">\n\n      <div className=\"box\">\n      <Container className=\"container\">\n        <Row className=\"rows\">\n          <Col sm={4}>\n            <div className=\"action-name\">Deposit:</div>\n          </Col>\n          <Col sm={8} >\n            <div className=\"deposit-value\">$30000</div>\n            <div className=\"deposit-token\">34 ETH</div>\n          </Col>\n        </Row>\n      </Container>\n\n\n      </div>\n      <div className=\"box\">\n      <Container className=\"container\">\n\n        <h4 className=\"loan-heading\">Loan</h4>\n        <hr/>\n        <Row>\n          <Col sm={4}>\n            <div className=\"action-name\">Collateral:</div>\n          </Col>\n          <Col sm={8} >\n            <div className=\"deposit-value\">$10000</div>\n            <div className=\"deposit-token\">34 ETH</div>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={4}>\n            <div className=\"action-name\">Owed:</div>\n          </Col>\n          <Col sm={8} >\n            <div className=\"deposit-value\">$103</div>\n            <div className=\"deposit-token\">100 DAI</div>\n          </Col>\n        </Row>\n\n      </Container>\n      </div>\n      </div>\n    );\n  }\n}\nexport default Balance;\n","/Users/ioanaroceanu/Documents/web-lending-app/src/ActionButtons.js",["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":6,"column":38,"nodeType":"60","messageId":"61","endLine":6,"endColumn":44},{"ruleId":"62","severity":1,"message":"63","line":73,"column":9,"nodeType":"64","endLine":73,"endColumn":46},{"ruleId":"62","severity":1,"message":"63","line":82,"column":15,"nodeType":"64","endLine":82,"endColumn":48},{"ruleId":"62","severity":1,"message":"63","line":85,"column":15,"nodeType":"64","endLine":85,"endColumn":48},{"ruleId":"62","severity":1,"message":"63","line":88,"column":15,"nodeType":"64","endLine":88,"endColumn":48},{"ruleId":"62","severity":1,"message":"63","line":91,"column":15,"nodeType":"64","endLine":91,"endColumn":48},{"ruleId":"58","severity":1,"message":"65","line":4,"column":75,"nodeType":"60","messageId":"61","endLine":4,"endColumn":84},{"ruleId":"58","severity":1,"message":"66","line":35,"column":11,"nodeType":"60","messageId":"61","endLine":35,"endColumn":19},{"ruleId":"58","severity":1,"message":"67","line":47,"column":9,"nodeType":"60","messageId":"61","endLine":47,"endColumn":17},{"ruleId":"58","severity":1,"message":"68","line":67,"column":72,"nodeType":"60","messageId":"61","endLine":67,"endColumn":79},{"ruleId":"69","severity":1,"message":"70","line":81,"column":9,"nodeType":"60","messageId":"71","endLine":81,"endColumn":19},{"ruleId":"72","severity":1,"message":"73","line":183,"column":26,"nodeType":"74","messageId":"75","endLine":183,"endColumn":28},{"ruleId":"69","severity":1,"message":"76","line":208,"column":15,"nodeType":"60","messageId":"71","endLine":208,"endColumn":16},{"ruleId":"58","severity":1,"message":"77","line":3,"column":8,"nodeType":"60","messageId":"61","endLine":3,"endColumn":19},{"ruleId":"58","severity":1,"message":"78","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":12},{"ruleId":"58","severity":1,"message":"79","line":5,"column":30,"nodeType":"60","messageId":"61","endLine":5,"endColumn":36},{"ruleId":"58","severity":1,"message":"80","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":12},{"ruleId":"58","severity":1,"message":"79","line":2,"column":30,"nodeType":"60","messageId":"61","endLine":2,"endColumn":36},{"ruleId":"58","severity":1,"message":"59","line":2,"column":38,"nodeType":"60","messageId":"61","endLine":2,"endColumn":44},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ERC20_ABI' is defined but never used.","'nonceHex' is assigned a value but never used.","'instance' is assigned a value but never used.","'balance' is assigned a value but never used.","no-redeclare","'privateKey' is already defined.","redeclared","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'i' is already defined.","'PriceUpdate' is defined but never used.","'Web3' is defined but never used.","'Navbar' is defined but never used.","'logo' is defined but never used.","no-global-assign","no-unsafe-negation"]